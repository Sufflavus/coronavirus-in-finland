{"version":3,"sources":["actions/actionTypes.js","constants.js","utils.js","actions/statisticsActions.js","reducers/initialState.js","reducers/statisticsReducer.js","reducers/rootReducer.js","containers/AllMeasures.js","containers/CurrentSituation.js","containers/Hospitalisations.js","containers/StatisticsByAge.js","containers/StatisticsBySex.js","containers/RegionalStatistics.js","components/AllMeasuresChart/AllMeasuresTooltip.js","components/ChartTitle.js","components/AllMeasuresChart/AllMeasuresChart.js","components/CurrentSituationPanel/MeasureCard.js","components/CurrentSituationPanel/CurrentSituationPanel.js","components/HospitalisationsChart.js","components/BarChartTooltip.js","components/StatisticsByAgeChart.js","components/StatisticsBySexChart.js","components/RegionalStatisticsChart/WeeklyRegionalStatisticsTooltip.js","components/RegionalStatisticsChart/WeeklyRegionalStatisticsChart.js","components/RegionalStatisticsChart/DailyRegionalStatisticsTooltip.js","components/RegionalStatisticsChart/DailyRegionalStatisticsChart.js","components/LanguageToggle.js","Layout.js","Main.js","App.js","index.js"],"names":["FETCH_COUNTRY_STATISTICS","FETCH_COUNTRY_TOTALS","FETCH_HOSPITALISATIONS","FETCH_STATISTICS_BY_AGE","FETCH_STATISTICS_BY_SEX","FETCH_WEEKLY_REGIONAL_STATISTICS","FETCH_DAILY_REGIONAL_STATISTICS","PALETTE","NUMBER_OF_TESTS_MEASURE_ID","NUMBER_OF_POSITIVE_CASES_MEASURE_ID","NUMBER_OF_DEATHS_MEASURE_ID","MEASURE_LABEL_TRANSLATION_KEY_MAP","HOSPITALISATION_AREA_SHORT_LABEL_TRANSLATION_KEY_MAP","HOSPITALISATION_AREA_LABEL_TRANSLATION_KEY_MAP","ALL_SEXES_MEASURE_ID","SEX_TRANSLATION_MAP","ALL_REGIONS_MEASURE_ID","HUS_REGION_MEASURE_ID","ALL_WEEKS_MEASURE_ID","formatDate","date","locale","format","moment","Date","formatNumber","number","toLocaleString","getWeekInfo","weekLabel","weekRegexp","groups","match","year","week","MEASURES","DAY_PROP_NAME","REGION_PROP_NAME","getCountryStatistics","key","dataToShow","JSONstat","allMeasuresDaily","Dataset","toTable","type","content","filter","item","value","includes","measure","map","labels","days","groupsByDate","reduce","result","resultData","Object","keys","forEach","arr","obj","val","push","getCountryTotals","totals","data","allMeasuresWeekly","x","population","numberOfTests","numberOfPositiveCases","numberOfDeaths","getTotalsFromWeeklyData","additionalStatistics","allTimeTotals","getStatisticsByAge","dataJson","measureId","age","ages","isLessThenFive","getStatisticsBySex","labelTranslationId","getRawWeeklyRegionalStatistics","regionMeasureId","weekId","getWeeklyRegionalStatistics","numberOfTestsData","testsByRegionWeekly","numberOfPositiveCasesData","positiveCasesByRegionWeekly","todayDate","dateStart","dateEnd","weeks","weekInfo","weekNumber","dateOfLastDayOfWeek","lastDayOfWeek","dates","regions","numberOfTestsItem","find","numberOfPositiveCasesItem","regionName","undefined","sort","itemA","itemB","yearA","yearB","weekA","weekB","items","getDailyRegionalStatistics","positiveCasesByRegionDaily","valueOf","dataItem","fetchCountryStatistics","fetchCountryTotals","fetchHospitalisations","areas","hospitalisationsByArea","currentHospitalisationsByArea","fetchStatisticsByAge","allPositiveCasesByAge","allDeathsByAge","fetchStatisticsBySex","allPositiveCasesBySex","allDeathsBySex","fetchWeeklyRegionalStatistics","fetchDailyRegionalStatistics","statistics","countryStatistics","loaded","countryTotals","hospitalisations","statisticsByAge","statisticsBySex","weeklyRegionalStatistics","dailyRegionalStatistics","statisticsReducer","combineReducers","state","initialState","action","rootReducer","localize","localizeReducer","mapStateToProps","translate","getTranslate","currentLanguage","getActiveLanguage","code","mapDispatchToProps","dispatch","statisticsActions","bindActionCreators","AllMeasuresTooltip","_getFormattedDate","props","_getFormattedNumber","_renderMeasureLabel","translationKey","id","this","active","payload","label","separator","measureIds","length","point","colors","dataKey","stroke","className","style","color","React","Component","Title","Box","p","Typography","component","variant","align","gutterBottom","children","MEASURE_IDS","MEASURE_COLOR_MAP","DEFAULT_LINE_OPACITY","CustomizedAxisTick","y","transform","dy","textAnchor","fill","AllMeasuresChart","_formatXAxis","tickItem","_formatYAxis","_formatLegendItem","entry","_onLegendClick","e","_toggleMeasure","_onMeasureCheckBoxChange","event","target","name","visibleMeasures","setState","_onLegendMouseEnter","o","opacity","_onLegendMouseLeave","_renderFilters","pl","pr","Grid","container","direction","justify","alignItems","xs","sm","FormControlLabel","control","Checkbox","checked","onChange","Paper","width","height","margin","top","right","bottom","left","tick","tickFormatter","formatter","onClick","onMouseOver","onMouseOut","strokeOpacity","hide","dot","fillOpacity","connect","Container","MeasureCard","valueColor","tooltipTranslationId","Tooltip","title","placement","arrow","enterTouchDelay","fontSize","fontWeight","CurrentSituationPanel","_formatDate","day","numberOfRecovered","pt","pb","spacing","IN_PATIENT_CARE_MEASURE_ID","IN_INTENSIVE_CARE_MEASURE_ID","HospitalisationsChart","_formatTooltipLabel","_formatTooltipItem","_toggleMeasute","thlLink","Link","href","rel","values","strokeDasharray","cursor","labelFormatter","position","BarChartTooltip","translationsMap","actualValuesKeys","POSITIVE_CASES_MEASURE_ID","DEATHS_MEASURE_ID","MEASURE_ACTUAL_VALUES_MAP","StatisticsByAgeChart","casesLabel","deathsLabel","_onAllAgesCheckBoxChange","allAgesVisible","isTotal","numberOfDeathsItem","isLessThenFiveDeaths","StatisticsBySexChart","_onAllSexesCheckBoxChange","allSexesVisible","WeeklyRegionalStatisticsTooltip","add","WeeklyRegionalStatisticsChart","_onRegionChange","selectedRegionMeasureId","regionOptions","a","b","localeCompare","FormControl","InputLabel","shrink","Select","labelId","MenuItem","DailyRegionalStatisticsTooltip","DailyRegionalStatisticsChart","BootstrapInput","withStyles","theme","root","marginTop","input","borderRadius","backgroundColor","palette","background","paper","border","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","LanguageToggle","_onLanguageChange","setActiveLanguage","languages","classes","formControl","native","activeLanguage","lang","minWidth","withLocalize","footerItems","links","url","text","Footer","footer","Copyright","getFullYear","Layout","fixedHeightPaper","clsx","fixedHeight","Fragment","CssBaseline","AppBar","elevation","appBar","Toolbar","toolbar","noWrap","toolbarTitle","maxWidth","heroContent","thlLastUpdateLink","thlMapLink","panel","mt","ul","listStyle","white","borderBottom","divider","flexWrap","flexGrow","link","cardHeader","grey","cardPricing","display","justifyContent","marginBottom","borderTop","paddingTop","paddingBottom","breakpoints","up","LANGUAGE_CODE","Main","_initTranslations","initialize","options","renderToStaticMarkup","renderInnerHtml","defaultLanguage","addTranslationForLanguage","enTranslations","ruTranslations","App","store","createStore","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e10254f.chunk.js","sourcesContent":["export const SET_LANGUAGE = 'SET_LANGUAGE';\nexport const FETCH_COUNTRY_STATISTICS = 'FETCH_COUNTRY_STATISTICS';\nexport const FETCH_COUNTRY_TOTALS = 'FETCH_COUNTRY_TOTALS';\nexport const FETCH_HOSPITALISATIONS = 'FETCH_HOSPITALISATIONS';\nexport const FETCH_STATISTICS_BY_AGE = 'FETCH_STATISTICS_BY_AGE';\nexport const FETCH_STATISTICS_BY_SEX = 'FETCH_STATISTICS_BY_SEX';\nexport const FETCH_WEEKLY_REGIONAL_STATISTICS = 'FETCH_WEEKLY_REGIONAL_STATISTICS';\nexport const FETCH_DAILY_REGIONAL_STATISTICS = 'FETCH_DAILY_REGIONAL_STATISTICS';","export const STATE = { \n    INITIAL: \"initial\",\n    SYNCHED: \"synched\"\n};\n\n// https://www.schemecolor.com/stunning-pie-chart-color-scheme.php\nexport const PALETTE = {\n    COLOR_1: \"#FFF1C9\",\n    COLOR_2: \"#F7B7A3\",\n    COLOR_3: \"#EA5F89\",\n    COLOR_4: \"#9B3192\",\n    COLOR_5: \"#57167E\",\n    COLOR_6: \"#2B0B3F\"\n};\n\nexport const NUMBER_OF_TESTS_MEASURE_ID = \"445356\";\nexport const NUMBER_OF_POSITIVE_CASES_MEASURE_ID = \"444833\";\nexport const NUMBER_OF_DEATHS_MEASURE_ID = \"492118\";\nexport const POPULATION_MEASURE_ID = \"445344\";\n\nexport const MEASURE_LABEL_TRANSLATION_KEY_MAP = {\n    [NUMBER_OF_TESTS_MEASURE_ID]: \"statistics.numberOfTests\",\n    [NUMBER_OF_POSITIVE_CASES_MEASURE_ID]: \"statistics.numberOfPositiveCases\",\n    [NUMBER_OF_DEATHS_MEASURE_ID]: \"statistics.numberOfDeaths\"\n};\n\nexport const ALL_HOSPITALISATION_AREA_ID = 0;\nexport const HELSINKI_HOSPITALISATION_AREA_ID = 1;\nexport const KUOPIO_HOSPITALISATION_AREA_ID = 2;\nexport const OULU_HOSPITALISATION_AREA_ID = 3;\nexport const TAMPERE_HOSPITALISATION_AREA_ID = 4;\nexport const TURKU_HOSPITALISATION_AREA_ID = 5;\n\nexport const HOSPITALISATION_AREA_SHORT_LABEL_TRANSLATION_KEY_MAP = {\n    [ALL_HOSPITALISATION_AREA_ID]: \"statistics.nationwide\",\n    [HELSINKI_HOSPITALISATION_AREA_ID]: \"geography.helsinki_\",\n    [KUOPIO_HOSPITALISATION_AREA_ID]: \"geography.kuopio_\",\n    [OULU_HOSPITALISATION_AREA_ID]: \"geography.oulu_\",\n    [TAMPERE_HOSPITALISATION_AREA_ID]: \"geography.tampere_\",\n    [TURKU_HOSPITALISATION_AREA_ID]: \"geography.turku_\",\n};\n\nexport const HOSPITALISATION_AREA_LABEL_TRANSLATION_KEY_MAP = {\n    [ALL_HOSPITALISATION_AREA_ID]: \"statistics.nationwideTotal\",\n    [HELSINKI_HOSPITALISATION_AREA_ID]: \"geography.helsinki_university_area\",\n    [KUOPIO_HOSPITALISATION_AREA_ID]: \"geography.kuopio_university_area\",\n    [OULU_HOSPITALISATION_AREA_ID]: \"geography.oulu_university_area\",\n    [TAMPERE_HOSPITALISATION_AREA_ID]: \"geography.tampere_university_area\",\n    [TURKU_HOSPITALISATION_AREA_ID]: \"geography.turku_university_area\",\n};\n\nexport const ALL_AGES_MEASURE_ID = \"444309\";\n\nexport const ALL_SEXES_MEASURE_ID = \"444328\";\nexport const MEN_MEASURE_ID = \"444356\";\nexport const WOMEN_MEASURE_ID = \"444563\";\n\nexport const SEX_TRANSLATION_MAP = {\n    [ALL_SEXES_MEASURE_ID]: \"statistics.allSexes\",\n    [MEN_MEASURE_ID]: \"statistics.men\",\n    [WOMEN_MEASURE_ID]: \"statistics.women\"\n};\n\nexport const ALL_REGIONS_MEASURE_ID = \"445222\";\nexport const HUS_REGION_MEASURE_ID = \"445193\";\nexport const ALL_WEEKS_MEASURE_ID = \"443686\";\n\nexport const REGION_MEASURES_TO_GEO_AREA_MAP = {\n    \"444996\": \"hcd19\",\n    \"445014\": \"hcd7\",\n    \"445043\": \"hcd9\",\n    \"445079\": \"hcd16\",\n    \"445101\": \"hcd20\",\n    \"445131\": \"hcd2\",\n    \"445155\": \"hcd10\",\n    \"445170\": \"hcd4\",\n    \"445175\": \"hcd11\",\n    \"445178\": \"hcd8\",\n    \"445190\": \"hcd21\",\n    \"445193\": \"hcd23\",\n    \"445197\": \"hcd3\",\n    \"445206\": \"hcd5\",\n    \"445222\": \"hcd1\", // all\n    \"445223\": \"hcd13\",\n    \"445224\": \"hcd22\",\n    \"445225\": \"hcd15\",\n    \"445230\": \"hcd17\",\n    \"445282\": \"hcd6\",\n    \"445285\": \"hcd14\",\n    \"445293\": \"hcd12\"\n};","import moment from 'moment';\nimport 'moment/locale/ru';\nimport 'moment/locale/en-gb';\n\nexport function groupBy(items, key) {\n    return items.reduce(\n        (result, item) => ({\n            ...result,\n            [item[key]]: [\n                ...(result[item[key]] || []),\n                item,\n            ],\n        }), {});\n}\n\nexport function formatDate(date, locale, format) {\n    return moment(new Date(date)).locale(locale).format(format);\n}\n\nexport function formatNumber(number, locale) { \n    return number.toLocaleString(locale);\n}\n\n// weekLabel is in format: \"Year 2020 Week 03\"\n// return: \"03\"\nexport function getWeekNumber(weekLabel) {\n    const parts = weekLabel.split(\" \");\n    return parts.length ? parts[parts.length - 1] : \"\";\n}\n\n// weekLabel is in format: \"Year 2020 Week 03\"\n// return: \"2020\"\nexport function getWeekYear(weekLabel) {\n    const parts = weekLabel.split(\" \");\n    return parts.length > 1 ? parts[1] : \"\";\n}\n\n// weekLabel is in format: \"Year 2020 Week 03\"\n// returns: {year: \"2020\", week: \"03\"}\nexport function getWeekInfo(weekLabel) {\n    const weekRegexp = /Year (?<year>[0-9]{4}) Week (?<week>[0-9]{2})/;\n    const groups = weekLabel.match(weekRegexp).groups;\n    return {year: groups.year, week: groups.week};\n  }","import JSONstat from \"jsonstat-toolkit\";\nimport moment from 'moment';\nimport { \n    FETCH_COUNTRY_STATISTICS, FETCH_COUNTRY_TOTALS, FETCH_HOSPITALISATIONS, \n    FETCH_STATISTICS_BY_AGE, FETCH_STATISTICS_BY_SEX, FETCH_WEEKLY_REGIONAL_STATISTICS,\n    FETCH_DAILY_REGIONAL_STATISTICS\n} from './actionTypes';\nimport { \n    allMeasuresDaily, allMeasuresWeekly, additionalStatistics, allPositiveCasesByAge, \n    allDeathsByAge, allPositiveCasesBySex, allDeathsBySex, \n    testsByRegionWeekly, positiveCasesByRegionWeekly, positiveCasesByRegionDaily,\n    labels, lastDayOfWeek\n} from '../data';\nimport {\n    POPULATION_MEASURE_ID, NUMBER_OF_TESTS_MEASURE_ID, NUMBER_OF_POSITIVE_CASES_MEASURE_ID, \n    NUMBER_OF_DEATHS_MEASURE_ID, SEX_TRANSLATION_MAP, ALL_WEEKS_MEASURE_ID\n} from '../constants';\nimport {groupBy, getWeekInfo} from \"../utils\";\n\n// show only number of tests, positive cases and deaths\nconst MEASURES = [\n    NUMBER_OF_TESTS_MEASURE_ID, \n    NUMBER_OF_POSITIVE_CASES_MEASURE_ID, \n    NUMBER_OF_DEATHS_MEASURE_ID\n];\n\n// In weekly statistics it indicates total for all the time\nconst TIME_MEASURE_ID = \"443686\";\n\nconst DAY_PROP_NAME = \"dateweek2020010120201231\";\nconst WEEK_PROP_NAME = DAY_PROP_NAME;\nconst AGE_PROP_NAME = \"ttr10yage\";\nconst SEX_PROP_NAME = \"sex\";\nconst REGION_PROP_NAME = \"hcdmunicipality2020\";\n\n// In statistics can be this placeholder instead of actual number.\n// \"..\" means that actual number is unknown, but it is between 1 and 4 (inclusive).\nconst LESS_THEN_FIVE_PLACEHOLDER = \"..\";\n\nfunction getCountryStatistics() {\n    const J = JSONstat(allMeasuresDaily);\n    const data = J.Dataset(0).toTable({ type : \"arrobj\", content: \"id\"});\n    const dataToShow = data\n        .filter(item => item.value != null && MEASURES.includes(item.measure))\n        .map(item => {\n            var date = labels.days[item[DAY_PROP_NAME]];\n            return { \n                measure: item.measure,  \n                value: +item.value,\n                date: date\n            };\n        });    \n    const groupsByDate = groupBy(dataToShow, \"date\");\n    const resultData = [];\n    Object.keys(groupsByDate).forEach(key => {\n        const arr = groupsByDate[key];\n        let obj = {date: key};\n        arr.forEach(val => {\n            obj[val.measure] = val.value;\n        });\n        resultData.push(obj);\n    });\n\n    return resultData;\n}\n\nfunction getTotalsFromWeeklyData() {\n    const J = JSONstat(allMeasuresWeekly);\n    const data = J.Dataset(0)\n        .toTable({ type : \"arrobj\", content: \"id\" })\n        .filter(x => x[DAY_PROP_NAME] === TIME_MEASURE_ID);\n\n    let totals = {};\n    \n    data.forEach(x => {\n        totals[x.measure] = +x.value;\n    });\n    \n    return {\n        population: totals[POPULATION_MEASURE_ID], \n\t\tnumberOfTests: totals[NUMBER_OF_TESTS_MEASURE_ID],\n        numberOfPositiveCases: totals[NUMBER_OF_POSITIVE_CASES_MEASURE_ID],\n        numberOfDeaths: totals[NUMBER_OF_DEATHS_MEASURE_ID],\n    };\n}\n\nfunction getCountryTotals() {\n    const totals = getTotalsFromWeeklyData();\n    return {\n        ...additionalStatistics.allTimeTotals,\n        ...totals\n    }\n}\n\nfunction getHospitalisations() {\n    return {\n        areas: additionalStatistics.areas,\n        hospitalisationsByArea: additionalStatistics.currentHospitalisationsByArea\n    };\n}\n\nfunction getStatisticsByAge(dataJson) {\n    const J = JSONstat(dataJson);\n    const data = J.Dataset(0).toTable({ type : \"arrobj\", content: \"id\"});\n    const dataToShow = data\n        .map(item => {\n            const measureId = item[AGE_PROP_NAME];\n            const age = labels.ages[item[AGE_PROP_NAME]];\n            const isLessThenFive = item.value === LESS_THEN_FIVE_PLACEHOLDER;\n            return { \n                measureId,\n                age,\n                value: isLessThenFive ? 4 : +item.value, // if less then 5, put 4 to avoid out of type\n                isLessThenFive: isLessThenFive\n            };\n        });\n    return dataToShow;\n}\n\nfunction getStatisticsBySex(dataJson) {\n    const J = JSONstat(dataJson);\n    const data = J.Dataset(0).toTable({ type : \"arrobj\", content: \"id\"});\n    const dataToShow = data\n        .map(item => {\n            const measureId = item[SEX_PROP_NAME];\n            const labelTranslationId = SEX_TRANSLATION_MAP[measureId];\n\n            return { \n                measureId,\n                labelTranslationId,\n                value: +item.value\n            };\n        });\n    return dataToShow;\n}\n\nfunction getRawWeeklyRegionalStatistics(dataJson) {\n    const J = JSONstat(dataJson);\n    const data = J.Dataset(0).toTable({ type : \"arrobj\", content: \"id\"});\n    const dataToShow = data\n        .map(item => {\n            const regionMeasureId = item[REGION_PROP_NAME];\n            const weekId = item[WEEK_PROP_NAME];\n\n            return { \n                weekId,\n                regionMeasureId,\n                value: +item.value\n            };\n        });\n    return dataToShow;\n}\n\nfunction getWeeklyRegionalStatistics() {\n    const numberOfTestsData = getRawWeeklyRegionalStatistics(testsByRegionWeekly);\n    const numberOfPositiveCasesData = getRawWeeklyRegionalStatistics(positiveCasesByRegionWeekly);\n\n    const todayDate = moment(new Date());\n    const dateStart = {week: 6, year: 2020};\n    const dateEnd = {week: +todayDate.format('w'), year: +todayDate.format('YYYY')};\n\n    const data = [];\n\n    Object.keys(labels.weeks).forEach(weekId => {\n        if(weekId === ALL_WEEKS_MEASURE_ID) {\n            return;\n        }\n\n        const weekLabel = labels.weeks[weekId];\n        const weekInfo = getWeekInfo(weekLabel);\n        const year = weekInfo.year;\n        const weekNumber = weekInfo.week;\n\n        if(+year <= dateStart.year && +weekNumber < dateStart.week) {\n            return;\n        }\n\n        if(+year >= dateEnd.year && +weekNumber > dateEnd.week) {\n            return;\n        }\n\n        const dateOfLastDayOfWeek = lastDayOfWeek.dates[year][weekNumber];\n\n        Object.keys(labels.regions).forEach(regionMeasureId => {\n            const numberOfTestsItem = numberOfTestsData\n                .find(x => x.regionMeasureId === regionMeasureId && x.weekId === weekId);\n            const numberOfPositiveCasesItem = numberOfPositiveCasesData\n                .find(x => x.regionMeasureId === regionMeasureId && x.weekId === weekId);\n\n            const regionName = labels.regions[regionMeasureId];\n\n            const item = {\n                weekId,\n                weekLabel,\n                dateOfLastDayOfWeek,\n                year,\n                weekNumber,\n                regionMeasureId,\n                regionName,\n                [NUMBER_OF_TESTS_MEASURE_ID]: numberOfTestsItem ? numberOfTestsItem.value : undefined,\n                [NUMBER_OF_POSITIVE_CASES_MEASURE_ID]: numberOfPositiveCasesItem ? numberOfPositiveCasesItem.value : undefined\n            };\n\n            data.push(item);\n        });\n    });\n\n    data.sort((itemA, itemB) => {\n        const yearA = +itemA.weekNumber;\n        const yearB = +itemB.weekNumber;\n        const weekA = +itemA.weekNumber;\n        const weekB = +itemB.weekNumber;\n\n        if(yearA < yearB) {\n            return weekA - weekB;\n        } else {\n            return false;\n        }\n    });\n\n    return {\n        items: data,\n        regions: labels.regions\n    };\n}\n\nfunction getRawDailyRegionalStatistics(dataJson) {\n    const J = JSONstat(dataJson);\n    const data = J.Dataset(0).toTable({ type : \"arrobj\", content: \"id\"});\n    const dataToShow = data\n        .map(item => {\n            const regionMeasureId = item[REGION_PROP_NAME];\n            var date = labels.days[item[DAY_PROP_NAME]];\n\n            return { \n                date,\n                regionMeasureId,\n                measureId: NUMBER_OF_POSITIVE_CASES_MEASURE_ID,\n                value: +item.value\n            };\n        });\n    return dataToShow;\n}\n\nfunction getDailyRegionalStatistics() {\n    const numberOfPositiveCasesData = getRawDailyRegionalStatistics(positiveCasesByRegionDaily);\n\n    const dateStart = moment(\"2020-01-15\").valueOf();\n    const dateEnd = moment(new Date()).valueOf();\n\n    const resultData = [];\n\n    numberOfPositiveCasesData.forEach(dataItem => {\n        const date = moment(dataItem.date).valueOf();\n\n        if(date < dateStart || date > dateEnd) {\n            return;\n        }\n\n        const regionMeasureId = dataItem.regionMeasureId;\n        const regionName = labels.regions[regionMeasureId];\n\n        const item = {\n            date: dataItem.date,\n            regionMeasureId,\n            regionName,\n            [NUMBER_OF_POSITIVE_CASES_MEASURE_ID]: dataItem.value\n        };\n\n        resultData.push(item);\n    });\n\n    return {\n        items: resultData,\n        regions: labels.regions\n    };\n}\n\nexport function fetchCountryStatistics() {\n    return { type: FETCH_COUNTRY_STATISTICS, data: getCountryStatistics() };\n}\n\nexport function fetchCountryTotals() {\n    return { type: FETCH_COUNTRY_TOTALS, data: getCountryTotals() };\n}\n\nexport function fetchHospitalisations() {\n    return { type: FETCH_HOSPITALISATIONS, data: getHospitalisations() };\n}\n\nexport function fetchStatisticsByAge() {\n    return { \n        type: FETCH_STATISTICS_BY_AGE, \n        data: {\n            numberOfPositiveCases: getStatisticsByAge(allPositiveCasesByAge),\n            numberOfDeaths: getStatisticsByAge(allDeathsByAge)\n        }\n    };\n}\n\nexport function fetchStatisticsBySex() {\n    return { \n        type: FETCH_STATISTICS_BY_SEX, \n        data: {\n            numberOfPositiveCases: getStatisticsBySex(allPositiveCasesBySex),\n            numberOfDeaths: getStatisticsBySex(allDeathsBySex)\n        }\n    };\n}\n\nexport function fetchWeeklyRegionalStatistics() {\n    return { \n        type: FETCH_WEEKLY_REGIONAL_STATISTICS, \n        data: getWeeklyRegionalStatistics()\n    };\n}\n\nexport function fetchDailyRegionalStatistics() {\n    return { \n        type: FETCH_DAILY_REGIONAL_STATISTICS, \n        data: getDailyRegionalStatistics()\n    };\n}","export default {\n    statistics: {\n        countryStatistics: {\n            items: [],\n            loaded: false\n        },\n        countryTotals: {\n            data: {},\n            loaded: false\n        },\n        hospitalisations: {\n            data: {},\n            loaded: false\n        },\n        statisticsByAge: {\n            data: {},\n            loaded: false\n        },\n        statisticsBySex: {\n            data: {},\n            loaded: false\n        },\n        weeklyRegionalStatistics: {\n            data: {},\n            loaded: false\n        },\n        dailyRegionalStatistics: {\n            data: {},\n            loaded: false\n        }\n    }\n};","import { combineReducers } from 'redux';\nimport { \n    FETCH_COUNTRY_STATISTICS, FETCH_COUNTRY_TOTALS, FETCH_HOSPITALISATIONS, \n    FETCH_STATISTICS_BY_AGE, FETCH_STATISTICS_BY_SEX, \n    FETCH_WEEKLY_REGIONAL_STATISTICS, FETCH_DAILY_REGIONAL_STATISTICS\n} from '../actions';\nimport initialState from './initialState';\n\nfunction countryStatistics(state = initialState.statistics.countryStatistics, action) {\n    switch (action.type) {\n        case FETCH_COUNTRY_STATISTICS:\n            return {\n                items: [...action.data],\n                loaded: true\n            };\n        default:\n            return state;\n    }\n}\n\nfunction countryTotals(state = initialState.statistics.countryTotals, action) {\n    switch (action.type) {\n        case FETCH_COUNTRY_TOTALS:\n            return {\n                data: {...action.data},\n                loaded: true\n            };\n        default:\n            return state;\n    }\n}\n\nfunction hospitalisations(state = initialState.statistics.hospitalisations, action) {\n    switch (action.type) {\n        case FETCH_HOSPITALISATIONS:\n            return {\n                data: {...action.data},\n                loaded: true\n            };\n        default:\n            return state;\n    }\n}\n\nfunction statisticsByAge(state = initialState.statistics.statisticsByAge, action) {\n    switch (action.type) {\n        case FETCH_STATISTICS_BY_AGE:\n            return {\n                data: {...action.data},\n                loaded: true\n            };\n        default:\n            return state;\n    }\n}\n\nfunction statisticsBySex(state = initialState.statistics.statisticsBySex, action) {\n    switch (action.type) {\n        case FETCH_STATISTICS_BY_SEX:\n            return {\n                data: {...action.data},\n                loaded: true\n            };\n        default:\n            return state;\n    }\n}\n\nfunction weeklyRegionalStatistics(state = initialState.statistics.weeklyRegionalStatistics, action) {\n    switch (action.type) {\n        case FETCH_WEEKLY_REGIONAL_STATISTICS:\n            return {\n                data: {...action.data},\n                loaded: true\n            };\n        default:\n            return state;\n    }\n}\n\nfunction dailyRegionalStatistics(state = initialState.statistics.dailyRegionalStatistics, action) {\n    switch (action.type) {\n        case FETCH_DAILY_REGIONAL_STATISTICS:\n            return {\n                data: {...action.data},\n                loaded: true\n            };\n        default:\n            return state;\n    }\n}\n\nconst statisticsReducer = combineReducers({\n    countryStatistics,\n    countryTotals,\n    hospitalisations,\n    statisticsByAge,\n    statisticsBySex,\n    weeklyRegionalStatistics,\n    dailyRegionalStatistics\n});\n\nexport default statisticsReducer;","import { combineReducers } from 'redux';\nimport { localizeReducer } from \"react-localize-redux\";\nimport statisticsReducer from './statisticsReducer';\n\nconst rootReducer = combineReducers({\n    localize: localizeReducer,\n    statistics: statisticsReducer\n});\n\nexport default rootReducer;","import { getTranslate, getActiveLanguage } from 'react-localize-redux';\nimport { bindActionCreators } from 'redux';\nimport { statisticsActions } from '../actions';\n\nexport const mapStateToProps = state => {\n    return {\n        translate: getTranslate(state.localize),\n        currentLanguage: getActiveLanguage(state.localize).code,\n        countryStatistics: state.statistics.countryStatistics\n    };\n};\n\nexport const mapDispatchToProps = (dispatch) => {\n    return {\n        statisticsActions: bindActionCreators(statisticsActions, dispatch)\n    };\n};","import { getTranslate, getActiveLanguage } from 'react-localize-redux';\nimport { bindActionCreators } from 'redux';\nimport { statisticsActions } from '../actions';\n\nexport const mapStateToProps = state => {\n    return {\n        translate: getTranslate(state.localize),\n        currentLanguage: getActiveLanguage(state.localize).code,\n        countryTotals: state.statistics.countryTotals\n    };\n};\n\nexport const mapDispatchToProps = (dispatch) => {\n    return {\n        statisticsActions: bindActionCreators(statisticsActions, dispatch)\n    };\n};","import { getTranslate, getActiveLanguage } from 'react-localize-redux';\nimport { bindActionCreators } from 'redux';\nimport { statisticsActions } from '../actions';\n\nexport const mapStateToProps = state => {\n    return {\n        translate: getTranslate(state.localize),\n        currentLanguage: getActiveLanguage(state.localize).code,\n        hospitalisations: state.statistics.hospitalisations\n    };\n};\n\nexport const mapDispatchToProps = (dispatch) => {\n    return {\n        statisticsActions: bindActionCreators(statisticsActions, dispatch)\n    };\n};","import { getTranslate, getActiveLanguage } from 'react-localize-redux';\nimport { bindActionCreators } from 'redux';\nimport { statisticsActions } from '../actions';\n\nexport const mapStateToProps = state => {\n    return {\n        translate: getTranslate(state.localize),\n        currentLanguage: getActiveLanguage(state.localize).code,\n        statisticsByAge: state.statistics.statisticsByAge\n    };\n};\n\nexport const mapDispatchToProps = (dispatch) => {\n    return {\n        statisticsActions: bindActionCreators(statisticsActions, dispatch)\n    };\n};","import { getTranslate, getActiveLanguage } from 'react-localize-redux';\nimport { bindActionCreators } from 'redux';\nimport { statisticsActions } from '../actions';\n\nexport const mapStateToProps = state => {\n    return {\n        translate: getTranslate(state.localize),\n        currentLanguage: getActiveLanguage(state.localize).code,\n        statisticsBySex: state.statistics.statisticsBySex\n    };\n};\n\nexport const mapDispatchToProps = (dispatch) => {\n    return {\n        statisticsActions: bindActionCreators(statisticsActions, dispatch)\n    };\n};","import { getTranslate, getActiveLanguage } from 'react-localize-redux';\nimport { bindActionCreators } from 'redux';\nimport { statisticsActions } from '../actions';\n\nexport const mapStateToProps = state => {\n    return {\n        translate: getTranslate(state.localize),\n        currentLanguage: getActiveLanguage(state.localize).code,\n        weeklyRegionalStatistics: state.statistics.weeklyRegionalStatistics,\n        dailyRegionalStatistics: state.statistics.dailyRegionalStatistics\n    };\n};\n\nexport const mapDispatchToProps = (dispatch) => {\n    return {\n        statisticsActions: bindActionCreators(statisticsActions, dispatch)\n    };\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Translate } from \"react-localize-redux\";\nimport { formatDate } from '../../utils';\nimport {MEASURE_LABEL_TRANSLATION_KEY_MAP} from '../../constants';\n\nclass AllMeasuresTooltip extends React.Component {\n    _getFormattedDate = (date) => {\n        return formatDate(date, this.props.currentLanguage, 'DD MMMM YYYY');\n    }\n\n    _getFormattedNumber = (value) => { \n        if(value === undefined) {\n            return \"-\";\n        }\n\n        return value ? value.toLocaleString(this.props.currentLanguage) : value;\n    }\n\n    _renderMeasureLabel = (measureId) => {\n        const translationKey = MEASURE_LABEL_TRANSLATION_KEY_MAP[measureId];\n        return <Translate id={translationKey} />;\n    }\n  \n    render() {\n        const { active, payload, label, separator, measureIds } = this.props;\n\n        if(!active || !payload.length) {\n            return null;\n        }\n\n        const point = payload[0].payload;\n        const colors = {};\n\n        payload.forEach(x => {\n            colors[x.dataKey] = x.stroke;\n        });\n\n        return (\n            <div className=\"custom-tooltip\">\n                <div className=\"title\">\n                    {this._getFormattedDate(label)}\n                </div>\n                {\n                    measureIds.map(id => (\n                        <div key={id} className=\"measure\" style={colors[id] ? {color: colors[id] } : null}>\n                            {this._renderMeasureLabel(id)}\n                            {separator}\n                            {this._getFormattedNumber(point[id])}\n                        </div>\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nAllMeasuresTooltip.propTypes = {\n    translate: PropTypes.func,\n    currentLanguage: PropTypes.string,\n    type: PropTypes.string,\n    payload: PropTypes.array,\n    label: PropTypes.string,\n    separator: PropTypes.string,\n    measureIds: PropTypes.array\n};\n\nexport default AllMeasuresTooltip;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nexport default function Title(props) {\n    return (\n        <Box p={3}>\n            <Typography component=\"h2\" variant=\"h5\" color=\"textPrimary\" align=\"center\" gutterBottom>\n                {props.children}\n            </Typography>\n        </Box>    \n    );\n}\n\nTitle.propTypes = {\n    children: PropTypes.node,\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n    ComposedChart, Line, Area, ResponsiveContainer, XAxis, YAxis, CartesianGrid, \n    Tooltip, Legend\n} from 'recharts';\nimport { Translate } from \"react-localize-redux\";\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { formatDate, formatNumber } from '../../utils';\nimport {AllMeasuresChartContainer as Container} from '../../containers';\nimport {\n    NUMBER_OF_TESTS_MEASURE_ID, NUMBER_OF_POSITIVE_CASES_MEASURE_ID, \n    NUMBER_OF_DEATHS_MEASURE_ID, MEASURE_LABEL_TRANSLATION_KEY_MAP,\n    PALETTE\n} from '../../constants';\nimport CustomTooltip from './AllMeasuresTooltip';\nimport Paper from '@material-ui/core/Paper';\nimport ChartTitle from '../ChartTitle';\n\nconst MEASURE_IDS = [NUMBER_OF_TESTS_MEASURE_ID, NUMBER_OF_POSITIVE_CASES_MEASURE_ID, NUMBER_OF_DEATHS_MEASURE_ID];\n\nconst MEASURE_COLOR_MAP = {\n    [NUMBER_OF_TESTS_MEASURE_ID]: PALETTE.COLOR_3, // \"#ff7c43\",  \n    [NUMBER_OF_POSITIVE_CASES_MEASURE_ID]: PALETTE.COLOR_4, // \"#a05195\", \n    [NUMBER_OF_DEATHS_MEASURE_ID]: PALETTE.COLOR_5 // \"#2f4b7c\" \n};\n\nconst DEFAULT_LINE_OPACITY = 0.8;\n\nfunction CustomizedAxisTick(props) {\n    const {x, y, stroke, payload} = props;\n          \n    return (\n        <g transform={`translate(${x},${y})`}>\n            <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666666\" transform=\"rotate(-35)\">\n                {formatDate(payload.value, props.currentLanguage, 'DD MMM')}\n            </text>\n        </g>\n    );\n}\n  \nclass AllMeasuresChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            opacity: {\n                [NUMBER_OF_TESTS_MEASURE_ID]: DEFAULT_LINE_OPACITY,\n                [NUMBER_OF_POSITIVE_CASES_MEASURE_ID]: DEFAULT_LINE_OPACITY,\n                [NUMBER_OF_DEATHS_MEASURE_ID]: DEFAULT_LINE_OPACITY\n            },\n            visibleMeasures: [\n                NUMBER_OF_TESTS_MEASURE_ID, \n                NUMBER_OF_POSITIVE_CASES_MEASURE_ID, \n                NUMBER_OF_DEATHS_MEASURE_ID\n            ]\n        };\n    }\n\n    componentDidMount() {\n        if(!this.props.countryStatistics.loaded) {\n            this.props.statisticsActions.fetchCountryStatistics();\n        }\n    }\n\n    _formatXAxis = (tickItem) => { \n        return formatDate(tickItem, this.props.currentLanguage, 'DD MMM');\n    }\n\n    _formatYAxis = (tickItem) => { \n        return formatNumber(tickItem, this.props.currentLanguage);\n    }\n\n    _formatLegendItem = (value, entry) => {\n        const translationKey = MEASURE_LABEL_TRANSLATION_KEY_MAP[value];\n        return <Translate id={translationKey} />;\n    }\n\n    _onLegendClick = (e) => {\n        const measureId = e.dataKey;\n        this._toggleMeasure(measureId);\n    }\n\n    _onMeasureCheckBoxChange = (event) => {\n        const measureId = event.target.name;\n        this._toggleMeasure(measureId);      \n    }\n\n    _toggleMeasure = (measureId) => {\n        const visibleMeasures = this.state.visibleMeasures;\n\n        this.setState({\n            visibleMeasures: visibleMeasures.includes(measureId) ?\n                visibleMeasures.filter(x => x !== measureId) :\n                [...visibleMeasures, measureId]\n        });\n    }\n\n    _onLegendMouseEnter = (o) => {\n        const { dataKey } = o;\n        const { opacity } = this.state;\n    \n  \t    this.setState({\n    \t    opacity: { ...opacity, [dataKey]: 1 }\n        });\n    }\n\n    _onLegendMouseLeave = (o) => {\n        const { dataKey } = o;\n        const { opacity } = this.state;\n    \n  \t    this.setState({\n    \t    opacity: { \n                ...opacity, \n                [dataKey]: DEFAULT_LINE_OPACITY \n            },\n        });\n    }\n\n    _renderFilters = () => {\n        const { visibleMeasures } = this.state;\n\n        return (\n            <Box pl={2} pr={2}>\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"baseline\">\n                    {MEASURE_IDS.map(id => (\n                        <Grid key={id} item xs={6} sm={3}>\n                            <FormControlLabel\n                                control={\n                                    <Checkbox \n                                        name={id}\n                                        checked={visibleMeasures.includes(id)} \n                                        onChange={this._onMeasureCheckBoxChange} \n                                        style ={{\n                                            color: MEASURE_COLOR_MAP[id],\n                                        }}\n                                    />\n                                }\n                                label={\n                                    <Typography variant=\"body2\" style={{ color: MEASURE_COLOR_MAP[id] }}>\n                                        <Translate id={MEASURE_LABEL_TRANSLATION_KEY_MAP[id]} />\n                                    </Typography>     \n                                }\n                            />\n                        </Grid>\n                    ))}\n                </Grid>\n            </Box>\n        )\n    }\n      \n    render() {\n        const { className, countryStatistics } = this.props;\n        const { visibleMeasures, opacity } = this.state;\n\n        if(!countryStatistics.loaded) {\n            return (\n                <Paper className={className}>\n                    <Translate id={\"loading\"} />\n                </Paper>\n            );\n        }\n\n        return (\n            <Paper className={className}>\n                <ChartTitle>\n                    <Translate id=\"statistics.allMeasuresChartTitle\" />\n                </ChartTitle>\n                {this._renderFilters()}\n                <div style={{ width: '100%', height: '550px'}}>\n                    <ResponsiveContainer>\n                        <ComposedChart\n                            data={countryStatistics.items}\n                            margin={{\n                                top: 20, right: 30, bottom: 20, left: 20,\n                            }}\n                        >\n                            <CartesianGrid stroke=\"#f5f5f5\" />\n                            <XAxis \n                                dataKey=\"date\" \n                                height={60} \n                                tick={\n                                    <CustomizedAxisTick currentLanguage={this.props.currentLanguage}/>\n                                }\n                            />\n                            <YAxis tickFormatter={this._formatYAxis}/>\n                            <Tooltip content={\n                                <CustomTooltip \n                                    translate={this.props.translate} \n                                    currentLanguage={this.props.currentLanguage}\n                                    measureIds={MEASURE_IDS}\n                                />}\n                            />\n                            <Legend \n                                formatter={this._formatLegendItem} \n                                onClick={this._onLegendClick}\n                                onMouseOver={this._onLegendMouseEnter}\n                                onMouseOut={this._onLegendMouseLeave}\n                            />\n                            <Line \n                                type=\"monotone\" \n                                strokeOpacity={opacity[NUMBER_OF_TESTS_MEASURE_ID]} \n                                dataKey={NUMBER_OF_TESTS_MEASURE_ID} \n                                stroke={MEASURE_COLOR_MAP[NUMBER_OF_TESTS_MEASURE_ID]}\n                                hide={!visibleMeasures.includes(NUMBER_OF_TESTS_MEASURE_ID)}\n                                dot={false}\n                            />\n                            {\n                                [NUMBER_OF_POSITIVE_CASES_MEASURE_ID, NUMBER_OF_DEATHS_MEASURE_ID].map(id => (\n                                    <Area \n                                        key={id}\n                                        type=\"monotone\" \n                                        dataKey={id} \n                                        hide={!visibleMeasures.includes(id)}\n                                        fill={MEASURE_COLOR_MAP[id]}\n                                        stroke={MEASURE_COLOR_MAP[id]}\n                                        fillOpacity={opacity[id]}\n                                    />\n                                ))\n                            }\n                        </ComposedChart>\n                    </ResponsiveContainer>\n                </div>\n            </Paper>\n          );\n    }\n}\n\nAllMeasuresChart.propTypes = {\n    translate: PropTypes.func,\n    currentLanguage: PropTypes.string,\n    className: PropTypes.string,\n    countryStatistics: PropTypes.object.isRequired,\n    statisticsActions: PropTypes.object,\n    filtersActions: PropTypes.object\n};\n\nexport default connect(Container.mapStateToProps, Container.mapDispatchToProps)(AllMeasuresChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Translate } from \"react-localize-redux\";\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { formatNumber } from '../../utils';\n\nclass MeasureCard extends React.Component {\n    render() {\n        const { labelTranslationId, value, valueColor, tooltipTranslationId } = this.props;\n    \n        return (\n            <Grid item xs={6}>\n                <Paper>\n                    <Box p={1}>\n                        <Typography color=\"textPrimary\" gutterBottom>\n                            <Translate id={labelTranslationId} />\n                            &nbsp;\n                            {\n                                tooltipTranslationId ? \n                                    <Tooltip title={<Translate id={tooltipTranslationId} />} placement=\"top\" arrow enterTouchDelay={500}>\n                                        <InfoIcon style={{ fontSize: 20, opacity: 0.3 }}/>\n                                    </Tooltip> :\n                                    null\n                            }\n                        </Typography>\n                        <Typography variant=\"h5\" component=\"h2\" style={{ color: valueColor, fontWeight: 600 }}>\n                            {formatNumber(value, this.props.currentLanguage)}\n                        </Typography>\n                    </Box>\n                </Paper>\n            </Grid>\n        );\n    }\n}\n\nMeasureCard.propTypes = {\n    translate: PropTypes.func,\n    currentLanguage: PropTypes.string,\n    labelTranslationId: PropTypes.string,\n    value: PropTypes.number,\n    valueColor: PropTypes.string,\n    tooltipTranslationId: PropTypes.string\n};\n\nexport default MeasureCard;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Translate } from \"react-localize-redux\";\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport {CurrentSituationContainer as Container} from '../../containers';\nimport ChartTitle from '../ChartTitle';\nimport MeasureCard from './MeasureCard';\nimport { formatDate } from '../../utils';\n\nclass CurrentSituationPanel extends React.Component {\n    componentDidMount() {\n        if(!this.props.countryTotals.loaded) {\n            this.props.statisticsActions.fetchCountryTotals();\n        }\n    }\n\n    _formatDate = (date) => { \n        return formatDate(date, this.props.currentLanguage, 'DD MMMM YYYY');\n    }\n      \n    render() {\n        const { countryTotals, className } = this.props;\n\n        if(!countryTotals.loaded) {\n            return (\n                <Paper className={className}>\n                    <Translate id={\"loading\"} />\n                </Paper>\n            );\n        }\n\n        const { day, population, numberOfTests, numberOfPositiveCases, numberOfRecovered, numberOfDeaths } = countryTotals.data;\n\n        return (\n            <Paper className={className}>\n                <ChartTitle>\n                    <Translate id=\"statistics.currentSituationTitle\" data={{ date: this._formatDate(day) }}/>\n                </ChartTitle>\n                <Box pt={0} pr={2} pb={2} pl={2}>\n                    <Grid container spacing={2} direction=\"row\" justify=\"flex-start\" alignItems=\"flex-start\">\n                        <MeasureCard key=\"1\" labelTranslationId=\"statistics.population\" value={population} valueColor={\"#0277BD\"}/>\n                        <MeasureCard key=\"2\" labelTranslationId=\"statistics.totalNumberOfTests\" value={numberOfTests} valueColor={\"#0277BD\"}/>\n                        <MeasureCard key=\"3\" labelTranslationId=\"statistics.totalNumberOfPositiveCases\" value={numberOfPositiveCases} valueColor={\"#FF8F00\"}/>\n                        <MeasureCard key=\"4\" labelTranslationId=\"statistics.totalNumberOfRecovered\" value={numberOfRecovered} valueColor={\"#2E7D32\"} tooltipTranslationId=\"statistics.totalNumberOfRecoveredHint\"/>\n                        <MeasureCard key=\"5\" labelTranslationId=\"statistics.totalNumberOfDeaths\" value={numberOfDeaths} valueColor={\"#D50000\"}/>\n                    </Grid>\n                </Box>\n            </Paper>\n          );\n    }\n}\n\nCurrentSituationPanel.propTypes = {\n    translate: PropTypes.func,\n    currentLanguage: PropTypes.string,\n    className: PropTypes.string,\n    countryTotals: PropTypes.object.isRequired,\n    statisticsActions: PropTypes.object\n};\n\nexport default connect(Container.mapStateToProps, Container.mapDispatchToProps)(CurrentSituationPanel);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Translate } from \"react-localize-redux\";\nimport Paper from '@material-ui/core/Paper'\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport {\n    BarChart, ResponsiveContainer, XAxis, YAxis, CartesianGrid, \n    Tooltip, Legend, Bar, LabelList\n} from 'recharts';\nimport {HospitalisationsContainer as Container} from '../containers';\nimport ChartTitle from './ChartTitle';\nimport { formatDate, formatNumber } from '../utils';\nimport {\n    HOSPITALISATION_AREA_SHORT_LABEL_TRANSLATION_KEY_MAP, \n    HOSPITALISATION_AREA_LABEL_TRANSLATION_KEY_MAP, PALETTE\n} from '../constants';\n\nconst DEFAULT_BAR_OPACITY = 0.8;\nconst IN_PATIENT_CARE_MEASURE_ID = \"inpatientCare\";\nconst IN_INTENSIVE_CARE_MEASURE_ID = \"inIntensiveCare\";\n\nclass HospitalisationsChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            opacity: {\n                [IN_PATIENT_CARE_MEASURE_ID]: DEFAULT_BAR_OPACITY,\n                [IN_INTENSIVE_CARE_MEASURE_ID]: DEFAULT_BAR_OPACITY\n            },\n            visibleMeasures: [\n                IN_PATIENT_CARE_MEASURE_ID, \n                IN_INTENSIVE_CARE_MEASURE_ID\n            ]\n        };\n    }\n\n    componentDidMount() {\n        if(!this.props.hospitalisations.loaded) {\n            this.props.statisticsActions.fetchHospitalisations();\n        }\n    }\n\n    _formatDate = (date) => { \n        return formatDate(date, this.props.currentLanguage, 'DD MMMM YYYY');\n    }\n\n    _formatXAxis = (tickItem) => { \n        const translationKey = HOSPITALISATION_AREA_SHORT_LABEL_TRANSLATION_KEY_MAP[tickItem]; \n        return this.props.translate(translationKey);\n    }\n\n    _formatYAxis = (tickItem) => { \n        return formatNumber(tickItem, this.props.currentLanguage);\n    }\n\n    _formatLegendItem = (value, entry) => {\n        const translationKey = `statistics.${value}`;\n        return <Translate id={translationKey} />;\n    }\n\n    _formatTooltipLabel = (value, entry) => {\n        const translationKey = HOSPITALISATION_AREA_LABEL_TRANSLATION_KEY_MAP[value]; \n        return this.props.translate(translationKey);\n    }\n\n    _formatTooltipItem = (value, name, props) => {\n        const translationKey = `statistics.${name}`;\n        return [\n            formatNumber(value, this.props.currentLanguage), \n            this.props.translate(translationKey)\n        ];\n    }\n\n    _toggleMeasute = (e) => {\n        const measureId = e.dataKey;\n        const visibleMeasures = this.state.visibleMeasures;\n\n        this.setState({\n            visibleMeasures: visibleMeasures.includes(measureId) ?\n                visibleMeasures.filter(x => x !== measureId) :\n                [...visibleMeasures, measureId]\n        });\n    }\n\n    _onLegendMouseEnter = (o) => {\n        const { dataKey } = o;\n        const { opacity } = this.state;\n    \n  \t    this.setState({\n    \t    opacity: { ...opacity, [dataKey]: 1 }\n        });\n    }\n\n    _onLegendMouseLeave = (o) => {\n        const { dataKey } = o;\n        const { opacity } = this.state;\n    \n  \t    this.setState({\n    \t    opacity: { \n                ...opacity, \n                [dataKey]: DEFAULT_BAR_OPACITY \n            },\n        });\n    }\n      \n    render() {\n        const { hospitalisations, className } = this.props;\n\n        if(!hospitalisations.loaded) {\n            return (\n                <Paper className={className}>\n                    <Translate id={\"loading\"} />\n                </Paper>\n            );\n        }\n\n        const { opacity, visibleMeasures } = this.state;\n        const { hospitalisationsByArea } = hospitalisations.data;\n        const day = hospitalisationsByArea.day;\n\n        return (\n            <Paper className={className}>\n                <ChartTitle>\n                    <Translate id=\"statistics.numberOfPeopleInHospitalsTitle\" data={{ date: this._formatDate(day) }}/>\n                    <Box pt={1}>\n                        <Typography align=\"center\" color=\"textSecondary\" component=\"p\">\n                            <Translate id=\"statistics.hospitalisationsAbout\" \n                                data={{ \n                                    thlLink: <Link href=\"https://thl.fi/en/web/infectious-diseases-and-vaccinations/what-s-new/coronavirus-covid-19-latest-updates/situation-update-on-coronavirus\" target=\"_blank\" rel=\"noreferrer\"><Translate id=\"layout.here\" /></Link>,\n                                }} \n                            />\n                        </Typography>\n                    </Box>\n                </ChartTitle>\n                <div style={{ width: '100%', height: '300px'}}>\n                    <ResponsiveContainer>\n                        <BarChart\n                            data={hospitalisationsByArea.values}\n                            margin={{\n                                top: 20, right: 30, bottom: 20, left: 20,\n                            }}\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"areaId\" tickFormatter={this._formatXAxis}/>\n                            <YAxis tickFormatter={this._formatYAxis}/>\n                            <Tooltip \n                                cursor={{ fill: PALETTE.COLOR_1, fillOpacity: 0.3 }} \n                                labelFormatter={this._formatTooltipLabel} \n                                formatter={this._formatTooltipItem}/>\n                            <Legend \n                                formatter={this._formatLegendItem}\n                                onClick={this._toggleMeasute}\n                                onMouseOver={this._onLegendMouseEnter}\n                                onMouseOut={this._onLegendMouseLeave}\n                            />\n                            <Bar \n                                dataKey={IN_PATIENT_CARE_MEASURE_ID} \n                                stroke={PALETTE.COLOR_3}\n                                fill={PALETTE.COLOR_3}\n                                fillOpacity={opacity[IN_PATIENT_CARE_MEASURE_ID]}\n                                hide={!visibleMeasures.includes(IN_PATIENT_CARE_MEASURE_ID)}\n                            >\n                                <LabelList dataKey={IN_PATIENT_CARE_MEASURE_ID} position=\"top\" />\n                            </Bar>\n                            <Bar \n                                dataKey={IN_INTENSIVE_CARE_MEASURE_ID} \n                                stroke={PALETTE.COLOR_4}\n                                fill={PALETTE.COLOR_4}\n                                fillOpacity={opacity[IN_INTENSIVE_CARE_MEASURE_ID]}\n                                hide={!visibleMeasures.includes(IN_INTENSIVE_CARE_MEASURE_ID)}\n                            >\n                                <LabelList dataKey={IN_INTENSIVE_CARE_MEASURE_ID} position=\"top\" />\n                            </Bar>\n                        </BarChart>\n                    </ResponsiveContainer>\n                </div>\n            </Paper>\n          );\n    }\n}\n\nHospitalisationsChart.propTypes = {\n    translate: PropTypes.func,\n    currentLanguage: PropTypes.string,\n    className: PropTypes.string,\n    hospitalisations: PropTypes.object.isRequired,\n    statisticsActions: PropTypes.object\n};\n\nexport default connect(Container.mapStateToProps, Container.mapDispatchToProps)(HospitalisationsChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Translate } from \"react-localize-redux\";\n\nclass BarChartTooltip extends React.Component {\n    _getFormattedNumber = (value) => { \n        return value ? value.toLocaleString(this.props.currentLanguage) : value;\n    }\n\n    _renderMeasureLabel = (measureId) => {\n        const {translationsMap} = this.props;\n        const translationKey = translationsMap[measureId];\n        return <Translate id={translationKey} />;\n    }\n  \n    render() {\n        const { active, payload, label, separator, measureIds, actualValuesKeys } = this.props;\n\n        if(!active || !payload.length) {\n            return null;\n        }\n\n        const point = payload[0].payload;\n        const colors = {};\n\n        payload.forEach(x => {\n            colors[x.dataKey] = x.stroke;\n        });\n\n        return (\n            <div className=\"custom-tooltip\">\n                <div className=\"title\">\n                    {label}\n                </div>\n                {\n                    measureIds.map(id => (\n                        <div key={id} className=\"measure\" style={colors[id] ? {color: colors[id] } : null}>\n                            {this._renderMeasureLabel(id)}\n                            {separator}\n                            {\n                                actualValuesKeys ? \n                                    point[actualValuesKeys[id]] :\n                                    this._getFormattedNumber(point[id])\n                            }\n                        </div>\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nBarChartTooltip.propTypes = {\n    translate: PropTypes.func,\n    currentLanguage: PropTypes.string,\n    type: PropTypes.string,\n    payload: PropTypes.array,\n    label: PropTypes.string,\n    separator: PropTypes.string,\n    measureIds: PropTypes.array,\n    translationsMap: PropTypes.object,\n    actualValuesKeys: PropTypes.object\n};\n\nexport default BarChartTooltip;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Translate } from \"react-localize-redux\";\nimport Paper from '@material-ui/core/Paper'\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport {\n    BarChart, ResponsiveContainer, XAxis, YAxis, CartesianGrid, \n    Tooltip, Legend, Bar, LabelList, Cell\n} from 'recharts';\nimport {StatisticsByAgeContainer as Container} from '../containers';\nimport { formatNumber } from '../utils';\nimport {PALETTE, ALL_AGES_MEASURE_ID} from '../constants';\nimport ChartTitle from './ChartTitle';\nimport { default as CustomTooltip } from './BarChartTooltip';\n\nconst DEFAULT_BAR_OPACITY = 0.8;\nconst POSITIVE_CASES_MEASURE_ID = \"numberOfPositiveCases\";\nconst DEATHS_MEASURE_ID = \"numberOfDeaths\";\n\nconst MEASURE_ACTUAL_VALUES_MAP = {\n    [POSITIVE_CASES_MEASURE_ID]: \"casesLabel\",\n    [DEATHS_MEASURE_ID]: \"deathsLAbel\"\n};\n\nconst MEASURE_LABEL_TRANSLATION_KEY_MAP = {\n    [POSITIVE_CASES_MEASURE_ID]: \"statistics.numberOfPositiveCases\",\n    [DEATHS_MEASURE_ID]: \"statistics.numberOfDeaths\"\n};\n\nconst MEASURE_COLOR_MAP = {\n    [POSITIVE_CASES_MEASURE_ID]: PALETTE.COLOR_3,\n    [DEATHS_MEASURE_ID]: PALETTE.COLOR_6\n};\n\nclass StatisticsByAgeChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            opacity: {\n                [POSITIVE_CASES_MEASURE_ID]: DEFAULT_BAR_OPACITY,\n                [DEATHS_MEASURE_ID]: DEFAULT_BAR_OPACITY\n            },\n            visibleMeasures: [\n                POSITIVE_CASES_MEASURE_ID, \n                DEATHS_MEASURE_ID\n            ],\n            allAgesVisible: false\n        };\n    }\n\n    componentDidMount() {\n        if(!this.props.statisticsByAge.loaded) {\n            this.props.statisticsActions.fetchStatisticsByAge();\n        }\n    }\n\n    _formatXAxis = (tickItem, value) => { \n        return tickItem;\n    }\n\n    _formatYAxis = (tickItem) => { \n        return formatNumber(tickItem, this.props.currentLanguage);\n    }\n\n    _formatTooltipItem = (value, name, props) => {\n        const {casesLabel, deathsLabel} = props.payload;\n        const realValue = name === POSITIVE_CASES_MEASURE_ID ? casesLabel : deathsLabel;\n        \n        const translationKey = MEASURE_LABEL_TRANSLATION_KEY_MAP[name]; \n        const label = this.props.translate(translationKey);\n        \n        return [\n            realValue, \n            label\n        ];\n    }\n\n    _onLegendClick = (e) => {\n        const measureId = e.dataKey;\n        this._toggleMeasure(measureId);\n    }\n\n    _onMeasureCheckBoxChange = (event) => {\n        const measureId = event.target.name;\n        this._toggleMeasure(measureId);      \n    }\n\n    _toggleMeasure = (measureId) => {\n        const visibleMeasures = this.state.visibleMeasures;\n\n        this.setState({\n            visibleMeasures: visibleMeasures.includes(measureId) ?\n                visibleMeasures.filter(x => x !== measureId) :\n                [...visibleMeasures, measureId]\n        });\n    }\n\n    _formatLegendItem = (value, entry) => {\n        const translationKey = MEASURE_LABEL_TRANSLATION_KEY_MAP[value]; \n        return <Translate id={translationKey} />;\n    }\n\n    _onLegendMouseEnter = (o) => {\n        const { dataKey } = o;\n        const { opacity } = this.state;\n    \n  \t    this.setState({\n    \t    opacity: { ...opacity, [dataKey]: 1 }\n        });\n    }\n\n    _onLegendMouseLeave = (o) => {\n        const { dataKey } = o;\n        const { opacity } = this.state;\n    \n  \t    this.setState({\n    \t    opacity: { \n                ...opacity, \n                [dataKey]: DEFAULT_BAR_OPACITY \n            }\n        });\n    }\n\n    _onAllAgesCheckBoxChange = (event) => {\n        this.setState({\n    \t    allAgesVisible: event.target.checked\n        });\n    }\n\n    _renderFilters = () => {\n        const { visibleMeasures, allAgesVisible } = this.state;\n\n        return (\n            <Box pl={2} pr={2}>\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"baseline\">\n                    {[POSITIVE_CASES_MEASURE_ID, DEATHS_MEASURE_ID].map(id => (\n                        <Grid key={id} item xs={6} sm={3}>\n                            <FormControlLabel\n                                control={\n                                    <Checkbox \n                                        name={id}\n                                        checked={visibleMeasures.includes(id)} \n                                        onChange={this._onMeasureCheckBoxChange} \n                                        style ={{\n                                            color: MEASURE_COLOR_MAP[id]\n                                        }}\n                                    />\n                                }\n                                label={\n                                    <Typography variant=\"body2\" style={{ color: MEASURE_COLOR_MAP[id] }}>\n                                        <Translate id={MEASURE_LABEL_TRANSLATION_KEY_MAP[id]} />\n                                    </Typography>     \n                                }\n                            />\n                        </Grid>\n                    ))}\n                    <Grid key={\"showAllAges\"} item xs={6} sm={3}>\n                        <FormControlLabel\n                            control={\n                                <Checkbox \n                                    name={\"showAllAges\"}\n                                    style ={{\n                                        color: PALETTE.COLOR_2\n                                    }}\n                                    checked={allAgesVisible} \n                                    onChange={this._onAllAgesCheckBoxChange} \n                                />\n                            }\n                            label={\n                                <Typography variant=\"body2\">\n                                    <Translate id={\"statistics.showAllAges\"} />\n                                </Typography>     \n                            }\n                        />\n                    </Grid>\n                </Grid>\n            </Box>\n        )\n    }\n      \n    render() {\n        const { statisticsByAge, className } = this.props;\n\n        if(!statisticsByAge.loaded) {\n            return (\n                <Paper className={className}>\n                    <Translate id={\"loading\"} />\n                </Paper>\n            );\n        }\n\n        const { opacity, visibleMeasures, allAgesVisible } = this.state;\n        const { numberOfPositiveCases, numberOfDeaths } = statisticsByAge.data;\n\n        const data = numberOfPositiveCases\n            .map(item => {\n                const {measureId, age, value} = item;\n                const isTotal = measureId === ALL_AGES_MEASURE_ID;\n                const numberOfDeathsItem = numberOfDeaths.find(x => x.measureId === measureId);\n                const isLessThenFiveDeaths = numberOfDeathsItem.isLessThenFive;\n                \n                return {\n                    measureId,\n                    isTotal,\n                    age: isTotal ? this.props.translate(\"statistics.allAges\") : age,\n                    [POSITIVE_CASES_MEASURE_ID]: value,\n                    [DEATHS_MEASURE_ID]: numberOfDeathsItem.value,\n                    isLessThenFiveDeaths: numberOfDeathsItem.isLessThenFive,\n                    [MEASURE_ACTUAL_VALUES_MAP[POSITIVE_CASES_MEASURE_ID]]: formatNumber(value, this.props.currentLanguage),\n                    [MEASURE_ACTUAL_VALUES_MAP[DEATHS_MEASURE_ID]]: isLessThenFiveDeaths ? \"< 5\" : formatNumber(numberOfDeathsItem.value, this.props.currentLanguage)\n                }\n            })\n            .filter(item => allAgesVisible ? true : !item.isTotal);\n\n        return (\n            <Paper className={className}>\n                <ChartTitle>\n                    <Translate id=\"statistics.statisticsByAgeTitle\"/>\n                    <Box pt={1}>\n                        <Typography align=\"center\" color=\"textSecondary\" component=\"p\">\n                            <Translate id=\"statistics.statisticsByAgeAbout\" />\n                        </Typography>\n                    </Box>\n                </ChartTitle>\n                {this._renderFilters()}\n                <div style={{ width: '100%', height: '300px'}}>\n                    <ResponsiveContainer>\n                        <BarChart\n                            data={data}\n                            margin={{\n                                top: 20, right: 30, bottom: 20, left: 20,\n                            }}\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"age\" tickFormatter={this._formatXAxis}/>\n                            <YAxis tickFormatter={this._formatYAxis}/>\n                            <Tooltip content={\n                                <CustomTooltip \n                                    translate={this.props.translate} \n                                    currentLanguage={this.props.currentLanguage}\n                                    measureIds={[POSITIVE_CASES_MEASURE_ID, DEATHS_MEASURE_ID]}\n                                    translationsMap={MEASURE_LABEL_TRANSLATION_KEY_MAP}\n                                    actualValuesKeys={MEASURE_ACTUAL_VALUES_MAP}\n                                />}\n                                cursor={{ fill: PALETTE.COLOR_1, fillOpacity: 0.3 }} \n                            />\n                            <Legend \n                                formatter={this._formatLegendItem}\n                                onClick={this._onLegendClick}\n                                onMouseOver={this._onLegendMouseEnter}\n                                onMouseOut={this._onLegendMouseLeave}\n                            />\n                            <Bar \n                                dataKey={POSITIVE_CASES_MEASURE_ID} \n                                stroke={MEASURE_COLOR_MAP[POSITIVE_CASES_MEASURE_ID]}\n                                fill={MEASURE_COLOR_MAP[POSITIVE_CASES_MEASURE_ID]}\n                                fillOpacity={opacity[POSITIVE_CASES_MEASURE_ID]}\n                                hide={!visibleMeasures.includes(POSITIVE_CASES_MEASURE_ID)}\n                            >\n                                <LabelList dataKey={MEASURE_ACTUAL_VALUES_MAP[POSITIVE_CASES_MEASURE_ID]} position=\"top\" />\n                            </Bar>\n                            <Bar \n                                dataKey={DEATHS_MEASURE_ID} \n                                stroke={MEASURE_COLOR_MAP[DEATHS_MEASURE_ID]}\n                                fill={MEASURE_COLOR_MAP[DEATHS_MEASURE_ID]}\n                                fillOpacity={opacity[DEATHS_MEASURE_ID]}\n                                hide={!visibleMeasures.includes(DEATHS_MEASURE_ID)}\n                            >\n                                <LabelList dataKey={MEASURE_ACTUAL_VALUES_MAP[DEATHS_MEASURE_ID]} position=\"top\" />\n                            </Bar>\n                        </BarChart>\n                    </ResponsiveContainer>\n                </div>\n            </Paper>\n          );\n    }\n}\n\nStatisticsByAgeChart.propTypes = {\n    translate: PropTypes.func,\n    currentLanguage: PropTypes.string,\n    className: PropTypes.string,\n    statisticsByAge: PropTypes.object.isRequired,\n    statisticsActions: PropTypes.object\n};\n\nexport default connect(Container.mapStateToProps, Container.mapDispatchToProps)(StatisticsByAgeChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Translate } from \"react-localize-redux\";\nimport Paper from '@material-ui/core/Paper'\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport {\n    BarChart, ResponsiveContainer, XAxis, YAxis, CartesianGrid, \n    Tooltip, Legend, Bar, LabelList\n} from 'recharts';\nimport {StatisticsBySexContainer as Container} from '../containers';\nimport { formatNumber } from '../utils';\nimport {PALETTE, ALL_SEXES_MEASURE_ID} from '../constants';\nimport ChartTitle from './ChartTitle';\nimport { default as CustomTooltip } from './BarChartTooltip';\n\nconst DEFAULT_BAR_OPACITY = 0.8;\nconst POSITIVE_CASES_MEASURE_ID = \"numberOfPositiveCases\";\nconst DEATHS_MEASURE_ID = \"numberOfDeaths\";\n\nconst MEASURE_ACTUAL_VALUES_MAP = {\n    [POSITIVE_CASES_MEASURE_ID]: \"casesLabel\",\n    [DEATHS_MEASURE_ID]: \"deathsLAbel\"\n};\n\nconst MEASURE_LABEL_TRANSLATION_KEY_MAP = {\n    [POSITIVE_CASES_MEASURE_ID]: \"statistics.numberOfPositiveCases\",\n    [DEATHS_MEASURE_ID]: \"statistics.numberOfDeaths\"\n};\n\nconst MEASURE_COLOR_MAP = {\n    [POSITIVE_CASES_MEASURE_ID]: PALETTE.COLOR_3,\n    [DEATHS_MEASURE_ID]: PALETTE.COLOR_6\n};\n\nclass StatisticsBySexChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            opacity: {\n                [POSITIVE_CASES_MEASURE_ID]: DEFAULT_BAR_OPACITY,\n                [DEATHS_MEASURE_ID]: DEFAULT_BAR_OPACITY\n            },\n            visibleMeasures: [\n                POSITIVE_CASES_MEASURE_ID, \n                DEATHS_MEASURE_ID\n            ],\n            allSexesVisible: false\n        };\n    }\n\n    componentDidMount() {\n        if(!this.props.statisticsBySex.loaded) {\n            this.props.statisticsActions.fetchStatisticsBySex();\n        }\n    }\n\n    _formatYAxis = (tickItem) => { \n        return formatNumber(tickItem, this.props.currentLanguage);\n    }\n\n    _formatTooltipItem = (value, name, props) => {\n        const {casesLabel, deathsLabel} = props.payload;\n        const realValue = name === POSITIVE_CASES_MEASURE_ID ? casesLabel : deathsLabel;\n        \n        const translationKey = MEASURE_LABEL_TRANSLATION_KEY_MAP[name]; \n        const label = this.props.translate(translationKey);\n        \n        return [\n            realValue, \n            label\n        ];\n    }\n\n    _onLegendClick = (e) => {\n        const measureId = e.dataKey;\n        this._toggleMeasure(measureId);\n    }\n\n    _onMeasureCheckBoxChange = (event) => {\n        const measureId = event.target.name;\n        this._toggleMeasure(measureId);      \n    }\n\n    _toggleMeasure = (measureId) => {\n        const visibleMeasures = this.state.visibleMeasures;\n\n        this.setState({\n            visibleMeasures: visibleMeasures.includes(measureId) ?\n                visibleMeasures.filter(x => x !== measureId) :\n                [...visibleMeasures, measureId]\n        });\n    }\n\n    _formatLegendItem = (value, entry) => {\n        const translationKey = MEASURE_LABEL_TRANSLATION_KEY_MAP[value]; \n        return <Translate id={translationKey} />;\n    }\n\n    _onLegendMouseEnter = (o) => {\n        const { dataKey } = o;\n        const { opacity } = this.state;\n    \n  \t    this.setState({\n    \t    opacity: { ...opacity, [dataKey]: 1 }\n        });\n    }\n\n    _onLegendMouseLeave = (o) => {\n        const { dataKey } = o;\n        const { opacity } = this.state;\n    \n  \t    this.setState({\n    \t    opacity: { \n                ...opacity, \n                [dataKey]: DEFAULT_BAR_OPACITY \n            }\n        });\n    }\n\n    _onAllSexesCheckBoxChange = (event) => {\n        this.setState({\n    \t    allSexesVisible: event.target.checked\n        });\n    }\n\n    _renderFilters = () => {\n        const { visibleMeasures, allSexesVisible } = this.state;\n\n        return (\n            <Box pl={2} pr={2}>\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"baseline\">\n                    {[POSITIVE_CASES_MEASURE_ID, DEATHS_MEASURE_ID].map(id => (\n                        <Grid key={id} item xs={6} sm={3}>\n                            <FormControlLabel\n                                control={\n                                    <Checkbox \n                                        name={id}\n                                        checked={visibleMeasures.includes(id)} \n                                        onChange={this._onMeasureCheckBoxChange} \n                                        style ={{\n                                            color: MEASURE_COLOR_MAP[id]\n                                        }}\n                                    />\n                                }\n                                label={\n                                    <Typography variant=\"body2\" style={{ color: MEASURE_COLOR_MAP[id] }}>\n                                        <Translate id={MEASURE_LABEL_TRANSLATION_KEY_MAP[id]} />\n                                    </Typography>     \n                                }\n                            />\n                        </Grid>\n                    ))}\n                    <Grid key={\"showAllSexes\"} item xs={6} sm={3}>\n                        <FormControlLabel\n                            control={\n                                <Checkbox \n                                    name={\"showAllSexes\"}\n                                    style ={{\n                                        color: PALETTE.COLOR_2\n                                    }}\n                                    checked={allSexesVisible} \n                                    onChange={this._onAllSexesCheckBoxChange} \n                                />\n                            }\n                            label={\n                                <Typography variant=\"body2\">\n                                    <Translate id={\"statistics.showAllSexes\"} />\n                                </Typography>     \n                            }\n                        />\n                    </Grid>\n                </Grid>\n            </Box>\n        )\n    }\n      \n    render() {\n        const { statisticsBySex, className } = this.props;\n\n        if(!statisticsBySex.loaded) {\n            return (\n                <Paper className={className}>\n                    <Translate id={\"loading\"} />\n                </Paper>\n            );\n        }\n\n        const { opacity, visibleMeasures, allSexesVisible } = this.state;\n        const { numberOfPositiveCases, numberOfDeaths } = statisticsBySex.data;\n\n        const data = numberOfPositiveCases\n            .map(item => {\n                const {measureId, labelTranslationId, value} = item;\n                const label = this.props.translate(labelTranslationId, this.props.currentLanguage);\n                const isTotal = measureId === ALL_SEXES_MEASURE_ID;\n                const numberOfDeathsItem = numberOfDeaths.find(x => x.measureId === measureId);\n\n                return {\n                    measureId,\n                    isTotal,\n                    label,\n                    [POSITIVE_CASES_MEASURE_ID]: value,\n                    [DEATHS_MEASURE_ID]: numberOfDeathsItem.value,\n                    [MEASURE_ACTUAL_VALUES_MAP[POSITIVE_CASES_MEASURE_ID]]: formatNumber(value, this.props.currentLanguage),\n                    [MEASURE_ACTUAL_VALUES_MAP[DEATHS_MEASURE_ID]]: formatNumber(numberOfDeathsItem.value, this.props.currentLanguage)\n                }\n            })\n            .filter(item => allSexesVisible ? true : !item.isTotal);\n\n        return (\n            <Paper className={className}>\n                <ChartTitle>\n                    <Translate id=\"statistics.statisticsBySexTitle\"/>\n                    <Box pt={1}>\n                        <Typography align=\"center\" color=\"textSecondary\" component=\"p\">\n                            <Translate id=\"statistics.statisticsBySexAbout\" />\n                        </Typography>\n                    </Box>\n                </ChartTitle>\n                {this._renderFilters()}\n                <div style={{ width: '100%', height: '300px'}}>\n                    <ResponsiveContainer>\n                        <BarChart\n                            data={data}\n                            margin={{\n                                top: 20, right: 30, bottom: 20, left: 20,\n                            }}\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"label\"/>\n                            <YAxis tickFormatter={this._formatYAxis}/>\n                            <Tooltip content={\n                                <CustomTooltip \n                                    label={\"label\"}\n                                    translate={this.props.translate} \n                                    currentLanguage={this.props.currentLanguage}\n                                    measureIds={[POSITIVE_CASES_MEASURE_ID, DEATHS_MEASURE_ID]}\n                                    translationsMap={MEASURE_LABEL_TRANSLATION_KEY_MAP}\n                                />}\n                                cursor={{ fill: PALETTE.COLOR_1, fillOpacity: 0.3 }} \n                            />\n                            <Legend \n                                formatter={this._formatLegendItem}\n                                onClick={this._onLegendClick}\n                                onMouseOver={this._onLegendMouseEnter}\n                                onMouseOut={this._onLegendMouseLeave}\n                            />\n                            <Bar \n                                dataKey={POSITIVE_CASES_MEASURE_ID} \n                                stroke={MEASURE_COLOR_MAP[POSITIVE_CASES_MEASURE_ID]}\n                                fill={MEASURE_COLOR_MAP[POSITIVE_CASES_MEASURE_ID]}\n                                fillOpacity={opacity[POSITIVE_CASES_MEASURE_ID]}\n                                hide={!visibleMeasures.includes(POSITIVE_CASES_MEASURE_ID)}\n                            >\n                                <LabelList dataKey={MEASURE_ACTUAL_VALUES_MAP[POSITIVE_CASES_MEASURE_ID]} position=\"top\" />\n                            </Bar>\n                            <Bar \n                                dataKey={DEATHS_MEASURE_ID} \n                                stroke={MEASURE_COLOR_MAP[DEATHS_MEASURE_ID]}\n                                fill={MEASURE_COLOR_MAP[DEATHS_MEASURE_ID]}\n                                fillOpacity={opacity[DEATHS_MEASURE_ID]}\n                                hide={!visibleMeasures.includes(DEATHS_MEASURE_ID)}\n                            >\n                                <LabelList dataKey={MEASURE_ACTUAL_VALUES_MAP[DEATHS_MEASURE_ID]} position=\"top\" />\n                            </Bar>\n                        </BarChart>\n                    </ResponsiveContainer>\n                </div>\n            </Paper>\n          );\n    }\n}\n\nStatisticsBySexChart.propTypes = {\n    translate: PropTypes.func,\n    currentLanguage: PropTypes.string,\n    className: PropTypes.string,\n    statisticsBySex: PropTypes.object.isRequired,\n    statisticsActions: PropTypes.object\n};\n\nexport default connect(Container.mapStateToProps, Container.mapDispatchToProps)(StatisticsBySexChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Translate } from \"react-localize-redux\";\nimport moment from 'moment';\nimport { formatDate } from '../../utils';\nimport {MEASURE_LABEL_TRANSLATION_KEY_MAP} from '../../constants';\n\nclass WeeklyRegionalStatisticsTooltip extends React.Component {\n    _getFormattedDate = (date) => {\n        return formatDate(date, this.props.currentLanguage, 'DD MMMM YYYY');\n    }\n\n    _getFormattedNumber = (value) => { \n        if(value === undefined) {\n            return \"-\";\n        }\n        \n        return value ? value.toLocaleString(this.props.currentLanguage) : value;\n    }\n\n    _renderMeasureLabel = (measureId) => {\n        const translationKey = MEASURE_LABEL_TRANSLATION_KEY_MAP[measureId];\n        return <Translate id={translationKey} />;\n    }\n  \n    render() {\n        const { active, payload, label, separator, measureIds } = this.props;\n\n        if(!active || !payload.length) {\n            return null;\n        }\n\n        const point = payload[0].payload;\n        const colors = {};\n\n        payload.forEach(x => {\n            colors[x.dataKey] = x.stroke;\n        });\n\n        const {dateOfLastDayOfWeek: dateEnd, weekNumber, year} = point;\n        const dateStart = moment(dateEnd, \"YYYY-MM-DD\").add(-6, 'days');\n\n        return (\n            <div className=\"custom-tooltip\">\n                <div className=\"title\">\n                    <Translate id=\"statistics.fullWeekInfo\" \n                        data={{ \n                            week: weekNumber,\n                            year: year,\n                            dateStart: this._getFormattedDate(dateStart),\n                            dateEnd: this._getFormattedDate(dateEnd)\n                        }} \n                    />\n                </div>\n                {\n                    measureIds.map(id => (\n                        <div key={id} className=\"measure\" style={colors[id] ? {color: colors[id] } : null}>\n                            {this._renderMeasureLabel(id)}\n                            {separator}\n                            {this._getFormattedNumber(point[id])}\n                        </div>\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nWeeklyRegionalStatisticsTooltip.propTypes = {\n    translate: PropTypes.func,\n    currentLanguage: PropTypes.string,\n    type: PropTypes.string,\n    payload: PropTypes.array,\n    label: PropTypes.string,\n    separator: PropTypes.string,\n    measureIds: PropTypes.array\n};\n\nexport default WeeklyRegionalStatisticsTooltip;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n    ComposedChart, Line, Area, ResponsiveContainer, XAxis, YAxis, CartesianGrid, \n    Tooltip, Legend\n} from 'recharts';\nimport { Translate } from \"react-localize-redux\";\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport { formatNumber, getWeekInfo } from '../../utils';\nimport { RegionalStatisticsContainer as Container } from '../../containers';\nimport {\n    NUMBER_OF_TESTS_MEASURE_ID, NUMBER_OF_POSITIVE_CASES_MEASURE_ID, \n    ALL_REGIONS_MEASURE_ID, ALL_WEEKS_MEASURE_ID, HUS_REGION_MEASURE_ID, PALETTE,\n    MEASURE_LABEL_TRANSLATION_KEY_MAP\n} from '../../constants';\nimport CustomTooltip from './WeeklyRegionalStatisticsTooltip';\nimport Paper from '@material-ui/core/Paper';\nimport ChartTitle from '../ChartTitle';\n\nconst DEFAULT_LINE_OPACITY = 0.8;\n\nconst MEASURE_IDS = [NUMBER_OF_TESTS_MEASURE_ID, NUMBER_OF_POSITIVE_CASES_MEASURE_ID];\n\nconst MEASURE_COLOR_MAP = {\n    [NUMBER_OF_TESTS_MEASURE_ID]: PALETTE.COLOR_3,\n    [NUMBER_OF_POSITIVE_CASES_MEASURE_ID]: PALETTE.COLOR_4\n};\n\nfunction CustomizedAxisTick(props) {\n    const {x, y, stroke, payload} = props;\n    const weekInfo = getWeekInfo(payload.value);\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666666\" transform=\"rotate(-35)\">\n                <Translate id={\"statistics.week\"} \n                    data={{ \n                        week: weekInfo.week,\n                        year: weekInfo.year\n                    }} \n                />\n            </text>\n        </g>\n    );\n}\n  \nclass WeeklyRegionalStatisticsChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            opacity: {\n                [NUMBER_OF_TESTS_MEASURE_ID]: DEFAULT_LINE_OPACITY,\n                [NUMBER_OF_POSITIVE_CASES_MEASURE_ID]: DEFAULT_LINE_OPACITY\n            },\n            visibleMeasures: [\n                NUMBER_OF_TESTS_MEASURE_ID, \n                NUMBER_OF_POSITIVE_CASES_MEASURE_ID\n            ],\n            selectedRegionMeasureId: HUS_REGION_MEASURE_ID\n        };\n    }\n\n    componentDidMount() {\n        if(!this.props.weeklyRegionalStatistics.loaded) {\n            this.props.statisticsActions.fetchWeeklyRegionalStatistics();\n        }\n    }\n\n    _formatXAxis = (tickItem) => { \n        return formatNumber(tickItem, this.props.currentLanguage);\n    }\n\n    _formatYAxis = (tickItem) => { \n        return formatNumber(tickItem, this.props.currentLanguage);\n    }\n\n    _formatLegendItem = (value, entry) => {\n        const translationKey = MEASURE_LABEL_TRANSLATION_KEY_MAP[value];\n        return <Translate id={translationKey} />;\n    }\n\n    _onLegendClick = (e) => {\n        const measureId = e.dataKey;\n        this._toggleMeasure(measureId);\n    }\n\n    _onMeasureCheckBoxChange = (event) => {\n        const measureId = event.target.name;\n        this._toggleMeasure(measureId);      \n    }\n\n    _toggleMeasure = (measureId) => {\n        const visibleMeasures = this.state.visibleMeasures;\n\n        this.setState({\n            visibleMeasures: visibleMeasures.includes(measureId) ?\n                visibleMeasures.filter(x => x !== measureId) :\n                [...visibleMeasures, measureId]\n        });\n    }\n\n    _onLegendMouseEnter = (o) => {\n        const { dataKey } = o;\n        const { opacity } = this.state;\n    \n  \t    this.setState({\n    \t    opacity: { ...opacity, [dataKey]: 1 }\n        });\n    }\n\n    _onLegendMouseLeave = (o) => {\n        const { dataKey } = o;\n        const { opacity } = this.state;\n    \n  \t    this.setState({\n    \t    opacity: { \n                ...opacity, \n                [dataKey]: DEFAULT_LINE_OPACITY \n            },\n        });\n    }\n\n    _onRegionChange = (event) => {\n        this.setState({\n            selectedRegionMeasureId: event.target.value\n        });\n    }\n\n    _renderFilters = () => {\n        const { visibleMeasures, selectedRegionMeasureId } = this.state;\n        const regions = this.props.weeklyRegionalStatistics.data.regions;\n        const regionOptions = Object.keys(regions)\n            .map(key => ({ id: key, name: regions[key]}))\n            .filter(x => x.id !== ALL_REGIONS_MEASURE_ID)\n            .sort((a, b) => {\n                return a.name.localeCompare(b.name);\n            });\n\n        return (\n            <Box pl={4} pr={2} pb={2}>\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"baselflex-end\">\n                    <Grid item xs={12} sm={6}>\n                        <FormControl>\n                            <InputLabel shrink id=\"region-label\">\n                                <Translate id={\"statistics.hcdRegion\"} />\n                            </InputLabel>\n                            <Select\n                                labelId=\"region-label\"\n                                value={selectedRegionMeasureId}\n                                onChange={this._onRegionChange}\n                            >\n                                {\n                                    regionOptions.map(item => (\n                                        <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>\n                                    ))\n                                }\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                    {MEASURE_IDS.map(id => (\n                        <Grid key={id} item xs={6} sm={3}>\n                            <FormControlLabel\n                                control={\n                                    <Checkbox \n                                        name={id}\n                                        checked={visibleMeasures.includes(id)} \n                                        onChange={this._onMeasureCheckBoxChange} \n                                        style ={{\n                                            color: MEASURE_COLOR_MAP[id],\n                                        }}\n                                    />\n                                }\n                                label={\n                                    <Typography variant=\"body2\" style={{ color: MEASURE_COLOR_MAP[id] }}>\n                                        <Translate id={MEASURE_LABEL_TRANSLATION_KEY_MAP[id]} />\n                                    </Typography>     \n                                }\n                            />\n                        </Grid>\n                    ))}\n                </Grid>\n            </Box>\n        )\n    }\n      \n    render() {\n        const { className, weeklyRegionalStatistics } = this.props;\n\n        if(!weeklyRegionalStatistics.loaded) {\n            return (\n                <Paper className={className}>\n                    <Translate id={\"loading\"} />\n                </Paper>\n            );\n        }\n\n        const { opacity, visibleMeasures, selectedRegionMeasureId } = this.state;\n\n        const data = weeklyRegionalStatistics.data.items\n            .filter(item => item.regionMeasureId === selectedRegionMeasureId && \n                item.weekId !== ALL_WEEKS_MEASURE_ID);\n\n        return (\n            <Paper className={className}>\n                <ChartTitle>\n                    <Translate id=\"statistics.weeklyRegionalStatisticsChartTitle\" />\n                    <Box pt={1}>\n                        <Typography align=\"center\" color=\"textSecondary\" component=\"p\">\n                            <Translate id=\"statistics.weeklyRegionalStatisticsAbout\" />\n                        </Typography>\n                    </Box>\n                </ChartTitle>\n                {this._renderFilters()}\n                <div style={{ width: '100%', height: '600px'}}>\n                    <ResponsiveContainer>\n                        <ComposedChart\n                            data={data}\n                            margin={{\n                                top: 20, right: 30, bottom: 20, left: 20,\n                            }}\n                        >\n                            <CartesianGrid stroke=\"#f5f5f5\" />\n                            <XAxis \n                                dataKey=\"weekLabel\" \n                                height={110} \n                                tick={\n                                    <CustomizedAxisTick currentLanguage={this.props.currentLanguage}/>\n                                }\n                            />\n                            <YAxis tickFormatter={this._formatYAxis}/>\n                            <Tooltip content={\n                                <CustomTooltip \n                                    translate={this.props.translate} \n                                    currentLanguage={this.props.currentLanguage}\n                                    measureIds={MEASURE_IDS}\n                                />}\n                            />\n                            <Legend \n                                formatter={this._formatLegendItem} \n                                onClick={this._onLegendClick}\n                                onMouseOver={this._onLegendMouseEnter}\n                                onMouseOut={this._onLegendMouseLeave}\n                            />\n                            <Line \n                                type=\"monotone\" \n                                strokeOpacity={opacity[NUMBER_OF_TESTS_MEASURE_ID]} \n                                dataKey={NUMBER_OF_TESTS_MEASURE_ID} \n                                stroke={MEASURE_COLOR_MAP[NUMBER_OF_TESTS_MEASURE_ID]}\n                                hide={!visibleMeasures.includes(NUMBER_OF_TESTS_MEASURE_ID)}\n                                dot={false}\n                            />\n                            <Area \n                                type=\"monotone\" \n                                dataKey={NUMBER_OF_POSITIVE_CASES_MEASURE_ID} \n                                hide={!visibleMeasures.includes(NUMBER_OF_POSITIVE_CASES_MEASURE_ID)}\n                                fill={MEASURE_COLOR_MAP[NUMBER_OF_POSITIVE_CASES_MEASURE_ID]}\n                                stroke={MEASURE_COLOR_MAP[NUMBER_OF_POSITIVE_CASES_MEASURE_ID]}\n                                fillOpacity={opacity[NUMBER_OF_POSITIVE_CASES_MEASURE_ID]}\n                            />\n                        </ComposedChart>\n                    </ResponsiveContainer>\n                </div>\n            </Paper>\n          );\n    }\n}\n\nWeeklyRegionalStatisticsChart.propTypes = {\n    translate: PropTypes.func,\n    currentLanguage: PropTypes.string,\n    className: PropTypes.string,\n    weeklyRegionalStatistics: PropTypes.object.isRequired,\n    statisticsActions: PropTypes.object\n};\n\nexport default connect(Container.mapStateToProps, Container.mapDispatchToProps)(WeeklyRegionalStatisticsChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Translate } from \"react-localize-redux\";\nimport { formatDate } from '../../utils';\nimport {MEASURE_LABEL_TRANSLATION_KEY_MAP} from '../../constants';\n\nclass DailyRegionalStatisticsTooltip extends React.Component {\n    _getFormattedDate = (date) => {\n        return formatDate(date, this.props.currentLanguage, 'DD MMMM YYYY');\n    }\n\n    _getFormattedNumber = (value) => { \n        if(value === undefined) {\n            return \"-\";\n        }\n\n        return value ? value.toLocaleString(this.props.currentLanguage) : value;\n    }\n\n    _renderMeasureLabel = (measureId) => {\n        const translationKey = MEASURE_LABEL_TRANSLATION_KEY_MAP[measureId];\n        return <Translate id={translationKey} />;\n    }\n  \n    render() {\n        const { active, payload, label, separator, measureIds } = this.props;\n\n        if(!active || !payload.length) {\n            return null;\n        }\n\n        const point = payload[0].payload;\n        const colors = {};\n\n        payload.forEach(x => {\n            colors[x.dataKey] = x.stroke;\n        });\n\n        return (\n            <div className=\"custom-tooltip\">\n                <div className=\"title\">\n                    {this._getFormattedDate(label)}\n                </div>\n                {\n                    measureIds.map(id => (\n                        <div key={id} className=\"measure\" style={colors[id] ? {color: colors[id] } : null}>\n                            {this._renderMeasureLabel(id)}\n                            {separator}\n                            {this._getFormattedNumber(point[id])}\n                        </div>\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nDailyRegionalStatisticsTooltip.propTypes = {\n    translate: PropTypes.func,\n    currentLanguage: PropTypes.string,\n    type: PropTypes.string,\n    payload: PropTypes.array,\n    label: PropTypes.string,\n    separator: PropTypes.string,\n    measureIds: PropTypes.array\n};\n\nexport default DailyRegionalStatisticsTooltip;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n    ComposedChart, Line, Area, ResponsiveContainer, XAxis, YAxis, CartesianGrid, \n    Tooltip, Legend\n} from 'recharts';\nimport { Translate } from \"react-localize-redux\";\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport { formatDate, formatNumber } from '../../utils';\nimport { RegionalStatisticsContainer as Container } from '../../containers';\nimport { \n    NUMBER_OF_POSITIVE_CASES_MEASURE_ID, MEASURE_LABEL_TRANSLATION_KEY_MAP,\n    ALL_REGIONS_MEASURE_ID, HUS_REGION_MEASURE_ID, PALETTE \n} from '../../constants';\nimport CustomTooltip from './DailyRegionalStatisticsTooltip';\nimport Paper from '@material-ui/core/Paper';\nimport ChartTitle from '../ChartTitle';\n\nconst MEASURE_IDS = [NUMBER_OF_POSITIVE_CASES_MEASURE_ID];\n\nconst MEASURE_COLOR_MAP = {  \n    [NUMBER_OF_POSITIVE_CASES_MEASURE_ID]: PALETTE.COLOR_4,\n};\n\nfunction CustomizedAxisTick(props) {\n    const {x, y, stroke, payload} = props;\n          \n    return (\n        <g transform={`translate(${x},${y})`}>\n            <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666666\" transform=\"rotate(-35)\">\n                {formatDate(payload.value, props.currentLanguage, 'DD MMM')}\n            </text>\n        </g>\n    );\n}\n  \nclass DailyRegionalStatisticsChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            selectedRegionMeasureId: HUS_REGION_MEASURE_ID\n        };\n    }\n\n    componentDidMount() {\n        if(!this.props.dailyRegionalStatistics.loaded) {\n            this.props.statisticsActions.fetchDailyRegionalStatistics();\n        }\n    }\n\n    _formatXAxis = (tickItem) => { \n        return formatDate(tickItem, this.props.currentLanguage, 'DD MMM');\n    }\n\n    _formatYAxis = (tickItem) => { \n        return formatNumber(tickItem, this.props.currentLanguage);\n    }\n\n    _formatLegendItem = (value, entry) => {\n        const translationKey = MEASURE_LABEL_TRANSLATION_KEY_MAP[value];\n        return <Translate id={translationKey} />;\n    }\n\n    _onRegionChange = (event) => {\n        this.setState({\n            selectedRegionMeasureId: event.target.value\n        });\n    }\n\n    _renderFilters = () => {\n        const { selectedRegionMeasureId } = this.state;\n        \n        const regions = this.props.dailyRegionalStatistics.data.regions;\n        \n        const regionOptions = Object.keys(regions)\n            .map(key => ({ id: key, name: regions[key]}))\n            .filter(x => x.id !== ALL_REGIONS_MEASURE_ID)\n            .sort((a, b) => {\n                return a.name.localeCompare(b.name);\n            });\n\n        return (\n            <Box pl={8} pr={2} pb={2}>\n                <FormControl>\n                    <InputLabel shrink id=\"region-label\">\n                        <Translate id={\"statistics.hcdRegion\"} />\n                    </InputLabel>\n                    <Select\n                        labelId=\"region-label\"\n                        value={selectedRegionMeasureId}\n                        onChange={this._onRegionChange}\n                    >\n                        {\n                            regionOptions.map(item => (\n                                <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>\n                            ))\n                        }\n                    </Select>\n                </FormControl>\n            </Box>\n        );\n    }\n      \n    render() {\n        const { className, dailyRegionalStatistics } = this.props;\n\n        if(!dailyRegionalStatistics.loaded) {\n            return (\n                <Paper className={className}>\n                    <Translate id={\"loading\"} />\n                </Paper>\n            );\n        }\n\n        const { selectedRegionMeasureId } = this.state;\n\n        const data = dailyRegionalStatistics.data.items\n            .filter(item => item.regionMeasureId === selectedRegionMeasureId);\n\n        return (\n            <Paper className={className}>\n                <ChartTitle>\n                    <Translate id=\"statistics.dailyRegionalStatisticsChartTitle\" />\n                    <Box pt={1}>\n                        <Typography align=\"center\" color=\"textSecondary\" component=\"p\">\n                            <Translate id=\"statistics.dailyRegionalStatisticsAbout\" />\n                        </Typography>\n                    </Box>\n                </ChartTitle>\n                {this._renderFilters()}\n                <div style={{ width: '100%', height: '550px'}}>\n                    <ResponsiveContainer>\n                        <ComposedChart\n                            data={data}\n                            margin={{\n                                top: 20, right: 30, bottom: 20, left: 20,\n                            }}\n                        >\n                            <CartesianGrid stroke=\"#f5f5f5\" />\n                            <XAxis \n                                dataKey=\"date\" \n                                height={60} \n                                tick={\n                                    <CustomizedAxisTick currentLanguage={this.props.currentLanguage}/>\n                                }\n                            />\n                            <YAxis tickFormatter={this._formatYAxis}/>\n                            <Tooltip content={\n                                <CustomTooltip \n                                    translate={this.props.translate} \n                                    currentLanguage={this.props.currentLanguage}\n                                    measureIds={MEASURE_IDS}\n                                />}\n                            />\n                            <Legend formatter={this._formatLegendItem} />\n                            <Area \n                                type=\"monotone\" \n                                dataKey={NUMBER_OF_POSITIVE_CASES_MEASURE_ID} \n                                fill={MEASURE_COLOR_MAP[NUMBER_OF_POSITIVE_CASES_MEASURE_ID]}\n                                stroke={MEASURE_COLOR_MAP[NUMBER_OF_POSITIVE_CASES_MEASURE_ID]}\n                                fillOpacity={0.8}\n                            />\n                        </ComposedChart>\n                    </ResponsiveContainer>\n                </div>\n            </Paper>\n          );\n    }\n}\n\nDailyRegionalStatisticsChart.propTypes = {\n    translate: PropTypes.func,\n    currentLanguage: PropTypes.string,\n    className: PropTypes.string,\n    dailyRegionalStatistics: PropTypes.object.isRequired,\n    statisticsActions: PropTypes.object,\n    filtersActions: PropTypes.object\n};\n\nexport default connect(Container.mapStateToProps, Container.mapDispatchToProps)(DailyRegionalStatisticsChart);\n","import React from \"react\";\nimport { withLocalize, Translate } from \"react-localize-redux\";\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputBase from '@material-ui/core/InputBase';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst BootstrapInput = withStyles((theme) => ({\n  root: {\n    'label + &': {\n      marginTop: theme.spacing(3),\n    },\n  },\n  input: {\n    borderRadius: 4,\n    position: 'relative',\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid #ced4da',\n    fontSize: 16,\n    padding: '10px 26px 10px 12px',\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\n    // Use the system font instead of the default Roboto font.\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n    '&:focus': {\n      borderRadius: 4,\n      borderColor: '#80bdff',\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n    },\n  },\n}))(InputBase);\n\nconst useStyles = theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 30,\n}});\n\nclass LanguageToggle extends React.Component {\n    _onLanguageChange = (event) => { \n        const locale = event.target.value;\n        this.props.setActiveLanguage(locale);\n    }\n\n    render() {\n        if(!this.props.languages.length) {\n            return null;\n        }\n\n        const { classes } = this.props;\n\n        return (\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n                <Select\n                    native\n                    value={this.props.activeLanguage.code}\n                    onChange={this._onLanguageChange}\n                    input={<BootstrapInput />}\n                >\n                    {this.props.languages.map(lang => (\n                        <option key={lang.code} value={lang.code}>\n                            {lang.name}\n                        </option>\n                    ))}\n                </Select>  \n            </FormControl>\n        );\n    }\n}\n\nexport default withStyles(useStyles)(withLocalize(LanguageToggle));\n","import React from \"react\";\nimport { Translate } from \"react-localize-redux\";\nimport clsx from 'clsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport { withStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport { \n    AllMeasuresChart, CurrentSituationPanel, LanguageToggle, \n    HospitalisationsChart, StatisticsByAgeChart, StatisticsBySexChart,\n    DailyRegionalStatisticsChart\n} from './components';\nimport './components/style/ChartLegend.css';\nimport './components/style/ChartTooltip.css';\n\nconst footerItems = [\n    {\n        title: 'layout.about',\n        links: [\n        {\n            url: \"https://bitbucket.org/Sufflava/coronavirus-statistics-in-finland/src/master/web-site/\",\n            text: \"layout.sourceCode\"\n        }, \n        {\n            url: \"https://bitbucket.org/Sufflava/coronavirus-statistics-in-finland/src/master/data/\",\n            text: \"layout.usedData\"\n        }, \n        {\n            url: \"https://sufflavus.github.io/\",\n            text: \"layout.developerWebSite\"\n        }]\n    },\n    {\n        title: 'layout.officialResources',\n        links: [\n        {\n            url: \"https://thl.fi/en/web/infectious-diseases-and-vaccinations/what-s-new/coronavirus-covid-19-latest-updates/situation-update-on-coronavirus\",\n            text: \"layout.thlLastUpdate\"\n        }, \n        {\n            url: \"https://experience.arcgis.com/experience/d40b2aaf08be4b9c8ec38de30b714f26\",\n            text: \"layout.statisticsOnMap\"\n        }, \n        {\n            url: \"https://thl.fi/en/web/thlfi-en/statistics/statistical-databases/open-data/confirmed-corona-cases-in-finland-covid-19-\",\n            text: \"layout.thlOpenDataApi\"\n        }]\n    }\n];\n\nfunction Footer() {\n    return (\n        <Grid container spacing={4} justify=\"space-evenly\">\n            {footerItems.map((footer) => (\n                <Grid item xs={12} sm={6} key={footer.title}>\n                    <Typography variant=\"h6\" color=\"textPrimary\" gutterBottom>\n                        <Translate id={footer.title} />\n                    </Typography>\n                    <ul>\n                        {footer.links.map((item) => (\n                            <li key={item.text}>\n                                <Link href={item.url} target=\"_blank\" rel=\"noreferrer\" variant=\"subtitle1\" color=\"textSecondary\">\n                                    <Translate id={item.text} />\n                                </Link>\n                            </li>\n                        ))}\n                    </ul>\n                </Grid>\n            ))}\n        </Grid>\n    );\n}\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            <Translate id=\"layout.copyright\" />{' '}\n            <Link color=\"inherit\" href=\"https://sufflavus.github.io/\" target=\"_blank\" rel=\"noreferrer\">\n                Tatiana Shatilova\n            </Link>{' '}\n            {new Date().getFullYear()}\n        </Typography>\n    );\n}\n\nconst useStyles = theme => ({\n    '@global': {\n      ul: {\n        margin: 0,\n        padding: 0,\n        listStyle: 'none',\n      },\n    },\n    appBar: {\n      backgroundColor: theme.palette.white,\n      borderBottom: `1px solid ${theme.palette.divider}`,\n    },\n    toolbar: {\n      flexWrap: 'wrap',\n    },\n    toolbarTitle: {\n      flexGrow: 1,\n    },\n    link: {\n      margin: theme.spacing(1, 1.5),\n    },\n    heroContent: {\n      padding: theme.spacing(8, 0, 6),\n    },\n    cardHeader: {\n      backgroundColor:\n        theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[700],\n    },\n    cardPricing: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'baseline',\n      marginBottom: theme.spacing(2),\n    },\n    panel: {\n      marginBottom: theme.spacing(5),\n    },\n    footer: {\n      borderTop: `1px solid ${theme.palette.divider}`,\n      marginTop: theme.spacing(8),\n      paddingTop: theme.spacing(3),\n      paddingBottom: theme.spacing(3),\n      [theme.breakpoints.up('sm')]: {\n        paddingTop: theme.spacing(6),\n        paddingBottom: theme.spacing(6),\n      },\n    },\n  });\n\nclass Layout extends React.Component {\n    render() {\n        const { classes } = this.props;\n        const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n        return (\n            <React.Fragment>\n                <CssBaseline />\n                <AppBar position=\"static\" color=\"default\" elevation={0} className={classes.appBar}>\n                    <Toolbar className={classes.toolbar}>\n                        <Typography variant=\"h6\" color=\"inherit\" noWrap className={classes.toolbarTitle}>\n                            <Translate id=\"layout.siteName\" />\n                        </Typography>\n                        {/*<nav>\n                            <Link variant=\"button\" color=\"textPrimary\" href=\"#\" className={classes.link}>\n                            <Translate id=\"layout.menuCharts\" />\n                            </Link>\n                            <Link variant=\"button\" color=\"textPrimary\" href=\"#\" className={classes.link}>\n                            <Translate id=\"layout.menuMap\" />\n                            </Link>\n                        </nav>*/}\n                        <LanguageToggle/>\n                    </Toolbar>\n                </AppBar>\n                {/* Hero unit */}\n                <Container maxWidth=\"md\" component=\"main\" className={classes.heroContent}>\n                    <Box p={3}>\n                        <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                            <Translate id=\"layout.pageTitle\" />\n                        </Typography>\n                        <Typography align=\"left\" color=\"textSecondary\" component=\"p\">\n                            <Translate id=\"layout.pageAbout\" />\n                        </Typography>\n                        <Typography align=\"left\" color=\"textSecondary\" component=\"p\">\n                            <Translate id=\"layout.officialDataInfo\" \n                                data={{ \n                                    thlLastUpdateLink: <Link href=\"https://thl.fi/en/web/infectious-diseases-and-vaccinations/what-s-new/coronavirus-covid-19-latest-updates/situation-update-on-coronavirus\" target=\"_blank\" rel=\"noreferrer\"><Translate id=\"layout.here\" /></Link>,\n                                    thlMapLink: <Link href=\"https://experience.arcgis.com/experience/d40b2aaf08be4b9c8ec38de30b714f26\" target=\"_blank\" rel=\"noreferrer\"><Translate id=\"layout.here\" /></Link>\n                                }} \n                            />\n                        </Typography>\n                    </Box>\n                </Container>\n                {/* End hero unit */}\n                <Container maxWidth=\"md\" component=\"main\">\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} className={classes.panel}>\n                            <CurrentSituationPanel className={classes.paper}/>\n                        </Grid>\n                        <Grid item xs={12} className={classes.panel}>\n                            <AllMeasuresChart className={fixedHeightPaper}/>\n                        </Grid>\n                        <Grid item xs={12} className={classes.panel}>\n                            <HospitalisationsChart className={fixedHeightPaper}/>\n                        </Grid>\n                        <Grid item xs={12} className={classes.panel}>\n                            <StatisticsByAgeChart className={fixedHeightPaper}/>\n                        </Grid>\n                        <Grid item xs={12} className={classes.panel}>\n                            <StatisticsBySexChart className={fixedHeightPaper}/>\n                        </Grid>\n                        <Grid item xs={12} className={classes.panel}>\n                            <DailyRegionalStatisticsChart className={fixedHeightPaper}/>\n                        </Grid>\n                    </Grid>\n                </Container>\n                {/* Footer */}\n                <Container maxWidth=\"md\" component=\"footer\" className={classes.footer}>\n                    <Footer/>\n                    <Box mt={5}>\n                        <Copyright />\n                    </Box>\n                </Container>\n                {/* End footer */}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withStyles(useStyles)(Layout);","import React from \"react\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport { withLocalize } from \"react-localize-redux\";\nimport enTranslations from \"./translations/global.en.json\";\nimport ruTranslations from \"./translations/global.ru.json\";\nimport Layout from './Layout';\n\nconst LANGUAGE_CODE = {\n    en: \"en\",\n    ru: \"ru\"\n};\n\nconst languages = [\n    { name: \"EN\", code: LANGUAGE_CODE.en },\n    { name: \"RU\", code: LANGUAGE_CODE.ru }\n];\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this._initTranslations();\n    }\n\n    _initTranslations = () => {\n        this.props.initialize({\n            languages,\n            options: {\n                renderToStaticMarkup,\n                renderInnerHtml: true,\n                defaultLanguage: LANGUAGE_CODE.en,\n                activeLanguage: LANGUAGE_CODE.en\n            }\n        });\n\n        this.props.addTranslationForLanguage(enTranslations, LANGUAGE_CODE.en);\n        this.props.addTranslationForLanguage(ruTranslations, LANGUAGE_CODE.ru);\n    }\n\n    render() {\n        return (\n            <Layout/>\n        );\n    }\n}\n\nexport default withLocalize(Main);\n","\nimport React from 'react';\nimport Main from './Main';\nimport './App.css';\n\nfunction App() {\n    return (\n        <Main />\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from \"react-dom\";\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\nimport { LocalizeProvider } from \"react-localize-redux\";\nimport App from './App';\nimport 'fontsource-roboto';\nimport './index.css';\n//import reportWebVitals from './reportWebVitals';\n\nconst store = createStore(rootReducer);\n\nrender(\n    <Provider store={store}>\n        <LocalizeProvider store={store}>\n            <App />\n        </LocalizeProvider>\n    </Provider>, \n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}